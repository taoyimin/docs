{"version":3,"file":"data-form.vue2.mjs","sources":["../../../../../../packages/components/data-form/src/data-form.vue"],"sourcesContent":["<template>\r\n  <el-form\r\n    ref=\"formRef\"\r\n    class=\"liv-data-form\"\r\n    :model=\"props.model\"\r\n    :inline=\"propsProxy.inline\"\r\n    @submit.native.prevent\r\n    @keyup.enter=\"handleSubmit\"\r\n    v-bind=\"pick(globalProps, Object.keys(formProps))\">\r\n    <el-config-provider :locale=\"zhCn\">\r\n      <template v-for=\"row in validFields\">\r\n        <el-row v-remove=\"propsProxy.inline\" :gutter=\"20\">\r\n          <template v-for=\"field in Array.isArray(row) ? row : [row]\" v-remove=\"!propsProxy.inline\">\r\n            <el-col\r\n              v-remove=\"propsProxy.inline\"\r\n              :span=\"\r\n                !isVNode(field) && field.span !== undefined\r\n                  ? field.span\r\n                  : 24 / (Array.isArray(row) ? row.length : 1)\r\n              \">\r\n              <component v-if=\"isVNode(field)\" :is=\"field\"></component>\r\n              <template v-else-if=\"field.fieldType === 'location' && Array.isArray(field.prop)\">\r\n                <form-item\r\n                  v-if=\"field.prop.length === 2\"\r\n                  v-bind=\"field\"\r\n                  :modelValue=\"[props.model[field.prop[0]], props.model[field.prop[1]]] as any\"\r\n                  v-model:longitude=\"props.model[field.prop[0]]\"\r\n                  v-model:latitude=\"props.model[field.prop[1]]\">\r\n                </form-item>\r\n                <form-item\r\n                  v-else-if=\"field.prop.length === 3\"\r\n                  v-bind=\"field\"\r\n                  :modelValue=\"[props.model[field.prop[0]], props.model[field.prop[1]]] as any\"\r\n                  v-model:longitude=\"props.model[field.prop[0]]\"\r\n                  v-model:latitude=\"props.model[field.prop[1]]\"\r\n                  v-model:address=\"props.model[field.prop[2]]\">\r\n                </form-item>\r\n              </template>\r\n              <template v-else-if=\"field.fieldType === 'numberRange' && Array.isArray(field.prop)\">\r\n                <form-item\r\n                  v-bind=\"field\"\r\n                  :modelValue=\"[props.model[field.prop[0]], props.model[field.prop[1]]] as any\"\r\n                  v-model:min-value=\"props.model[field.prop[0]]\"\r\n                  v-model:max-value=\"props.model[field.prop[1]]\">\r\n                </form-item>\r\n              </template>\r\n              <template v-else-if=\"field.fieldType === 'slot'\">\r\n                <form-item v-bind=\"field\">\r\n                  <template v-for=\"(_, name) in omit($slots, 'default')\" #[name]=\"slotData\">\r\n                    <slot :name=\"name\" v-bind=\"slotData || {}\" />\r\n                  </template>\r\n                </form-item>\r\n              </template>\r\n\r\n              <form-item\r\n                v-else-if=\"field.fieldType\"\r\n                v-bind=\"field\"\r\n                v-model=\"props.model[field.prop as string]\">\r\n              </form-item>\r\n            </el-col>\r\n          </template>\r\n        </el-row>\r\n      </template>\r\n      <el-form-item label-width=\"0\">\r\n        <div v-remove=\"propsProxy.inline\" class=\"liv-data-form__button\">\r\n          <template v-for=\"button in validButtons\" :key=\"button.name\">\r\n            <el-button\r\n              v-if=\"button.show !== false\"\r\n              @click=\"handleButtonClick(button)\"\r\n              :loading=\"buttonLoadingStatus[button.key!] ?? false\"\r\n              v-bind=\"omit(button, ['onClick'])\"\r\n              >{{ button.name }}</el-button\r\n            >\r\n          </template>\r\n        </div>\r\n      </el-form-item>\r\n      <liv-a-map v-if=\"containLocationPicker\" style=\"display: none\" @loaded=\"mapLoaded\"></liv-a-map>\r\n    </el-config-provider>\r\n  </el-form>\r\n</template>\r\n<script\r\n  lang=\"ts\"\r\n  setup\r\n  generic=\"T extends Record<string | number | symbol, any>, U extends DataFormFields<T>\">\r\nimport {\r\n  ref,\r\n  toValue,\r\n  watchEffect,\r\n  useAttrs,\r\n  useSlots,\r\n  computed,\r\n  VNode,\r\n  isVNode,\r\n  MaybeRef,\r\n  inject,\r\n  provide,\r\n  shallowRef,\r\n} from 'vue';\r\nimport {\r\n  ElForm,\r\n  ElFormItem,\r\n  ElCol,\r\n  ElRow,\r\n  ElButton,\r\n  ElConfigProvider,\r\n  ElMessage,\r\n  formProps,\r\n  type FormInstance as ElFormInstance,\r\n  type FormItemProp,\r\n  type FormValidateCallback,\r\n  type FormValidationResult,\r\n} from 'element-plus';\r\n// @ts-ignore\r\nimport zhCn from 'element-plus/dist/locale/zh-cn.mjs';\r\nimport { pick, omit } from 'lodash-es';\r\nimport type {\r\n  DataFormButton,\r\n  DataFormField,\r\n  DataFormFields,\r\n  DataFormFullProps,\r\n  DataFormProps,\r\n} from './data-form';\r\nimport FormItem from '../../form-item/src/form-item.vue';\r\nimport LivAMap from '../../a-map/src/a-map.vue';\r\nimport { vRemove } from '../../remove';\r\nimport {\r\n  MakeRequired,\r\n  TwoDimensionArrayable,\r\n  checkAuthoritys,\r\n  getPropsPoxy,\r\n  injectCheckAuthority,\r\n  sortByOrder,\r\n} from '@liv-web/utils';\r\nimport {\r\n  CIPHERTEXT_STATUS_KEY,\r\n  DATA_FORM_KEY,\r\n  DATA_FORM_MODEL_KEY,\r\n  DATA_FORM_AMAP_KEY,\r\n} from '@liv-web/constants';\r\n\r\n/**\r\n * 组件选项\r\n */\r\ndefineOptions({\r\n  name: 'LivDataForm',\r\n});\r\n\r\n/**\r\n * 注入全局属性\r\n */\r\nconst globalProps = inject(DATA_FORM_KEY, {});\r\n\r\n/**\r\n * 组件属性\r\n */\r\nconst props = withDefaults(defineProps<DataFormProps<T, U>>(), {\r\n  fields: () => [] as unknown as U,\r\n  inline: () => false,\r\n  showReset: () => false,\r\n  buttons: () => [] as DataFormButton<T>[],\r\n});\r\n\r\n/**\r\n * 属性代理\r\n */\r\nconst propsProxy = getPropsPoxy<MakeRequired<DataFormFullProps<T>, 'inline' | 'showReset'>>(\r\n  props,\r\n  globalProps,\r\n);\r\n\r\n/**\r\n * 注入权限校验方法\r\n */\r\nconst checkAuthority = injectCheckAuthority();\r\n\r\n/**\r\n * 表单数据模型\r\n */\r\nconst formModel = computed(() => {\r\n  return { ...props.model };\r\n});\r\n\r\n/**\r\n * 提供表单数据\r\n */\r\nprovide(DATA_FORM_MODEL_KEY, formModel);\r\n\r\n/**\r\n * AMap实例\r\n */\r\nconst AMap = shallowRef();\r\n\r\n/**\r\n * 向子组件提供AMap实例\r\n */\r\nprovide(DATA_FORM_AMAP_KEY, AMap);\r\n\r\n/**\r\n * 是否包含地图选点表单项\r\n */\r\nconst containLocationPicker = computed(() => {\r\n  return validFields.value.some(field => {\r\n    if (Array.isArray(field)) {\r\n      return field.some(subField => {\r\n        if (isVNode(subField)) {\r\n          return (\r\n            subField?.props?.['field-type'] === 'location' ||\r\n            subField?.props?.['fieldType'] === 'location'\r\n          );\r\n        } else {\r\n          return subField.fieldType === 'location';\r\n        }\r\n      });\r\n    } else {\r\n      if (isVNode(field)) {\r\n        return (\r\n          field?.props?.['field-type'] === 'location' || field?.props?.['fieldType'] === 'location'\r\n        );\r\n      } else {\r\n        return field.fieldType === 'location';\r\n      }\r\n    }\r\n  });\r\n});\r\n\r\n/**\r\n * 地图加载完成\r\n * @param _mapInstance 地图实例\r\n * @param AMapInstance AMap实例\r\n */\r\nfunction mapLoaded(_mapInstance: AMap.Map, AMapInstance: AMap.NameSpace) {\r\n  AMap.value = AMapInstance;\r\n}\r\n\r\n/**\r\n * 表单实例\r\n */\r\nconst formRef = ref<ElFormInstance | null>(null);\r\n\r\n/**\r\n * 组件参数\r\n */\r\nconst attrs = useAttrs();\r\n\r\n/**\r\n * 组件插槽\r\n */\r\nconst slots = useSlots();\r\n\r\n/**\r\n * 通过default插槽传入的虚拟节点\r\n */\r\nconst vNodes = computed(() => {\r\n  return slots['default'] ? slots['default']() : [];\r\n});\r\n\r\n/**\r\n * 按钮的加载状态\r\n */\r\nconst buttonLoadingStatus = ref<Record<string | symbol, boolean>>({});\r\n\r\n/**\r\n * 有效的fields\r\n */\r\nconst validFields = computed(() => {\r\n  // 将通过props传入的fields规范化为值并过滤掉fieldType为undefined的值\r\n  const fields: TwoDimensionArrayable<DataFormField<T> | VNode> = toValues(props.fields)\r\n    .filter(\r\n      field =>\r\n        Array.isArray(field) ||\r\n        (field.fieldType &&\r\n          field.show !== false &&\r\n          checkAuthoritys(checkAuthority, field.authority)),\r\n    )\r\n    .map(field => {\r\n      if (Array.isArray(field)) {\r\n        // 从数组末尾开始向前遍历\r\n        for (let i = field.length - 1; i >= 0; i--) {\r\n          if (field[i].show === false) {\r\n            field.splice(i, 1);\r\n          }\r\n        }\r\n      }\r\n      return field;\r\n    });\r\n  // 将通过default插槽传入的虚拟节点插入二维数组对应位置\r\n  vNodes.value.forEach(vNode => {\r\n    const fieldIndex: number | undefined = vNode.props\r\n      ? (vNode.props['field-index'] ?? vNode.props['fieldIndex'])\r\n      : undefined;\r\n    if (fieldIndex !== undefined && fieldIndex < fields.length) {\r\n      const field = fields[fieldIndex];\r\n      if (Array.isArray(field)) {\r\n        field.push(vNode);\r\n      } else {\r\n        fields.splice(fieldIndex, 0, [vNode]);\r\n      }\r\n    } else {\r\n      fields.push([vNode]);\r\n    }\r\n  });\r\n  return fields;\r\n});\r\n\r\n/**\r\n * 初始化表单项配置副作用\r\n */\r\nwatchEffect(() => {\r\n  const fields = toValues(props.fields);\r\n  fields.forEach(field => {\r\n    if (Array.isArray(field)) {\r\n      field.forEach(subField => {\r\n        if (subField.watchEffect) {\r\n          watchEffect(() => {\r\n            // @ts-ignore\r\n            subField.watchEffect?.(props.model, formRef.value);\r\n          });\r\n        }\r\n      });\r\n    } else {\r\n      if (field.watchEffect) {\r\n        watchEffect(() => {\r\n          // @ts-ignore\r\n          field.watchEffect?.(props.model, formRef.value);\r\n        });\r\n      }\r\n    }\r\n  });\r\n});\r\n\r\n/**\r\n * 初始化操作按钮副作用\r\n */\r\nwatchEffect(() => {\r\n  props.buttons.forEach(button => {\r\n    if (button.watchEffect) {\r\n      watchEffect(() => {\r\n        // @ts-ignore\r\n        button.watchEffect?.(props.model, formRef.value);\r\n      });\r\n    }\r\n  });\r\n});\r\n\r\n/**\r\n * 表单配置项数组类型\r\n * @template T 表单的数据类型\r\n * @remarks 该数组可能为二维数组，并且所有元素都有可能是Ref\r\n */\r\ntype MaybeRefFields<T> = TwoDimensionArrayable<MaybeRef<T>>;\r\n\r\n/**\r\n * 将表单配置项数组规范化为值\r\n * @template T 表单的数据类型\r\n * @remarks 该方法为深度遍历，可以传入二维数组，二维数组的元素如果是数组则会递归调用本方法。\r\n * @param refs 需要规范化的表单配置项数组或Ref\r\n * @returns 规范化后的值数组\r\n */\r\nfunction toValues<T>(refs: MaybeRefFields<T>): (T | T[])[] {\r\n  return refs.map(item => {\r\n    const value = toValue(item);\r\n    if (Array.isArray(value)) {\r\n      return toValues<T>(value) as T[];\r\n    } else {\r\n      return value;\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * 内置操作按钮\r\n */\r\nconst innerButtons = computed<DataFormButton<T>[]>(() => {\r\n  return [\r\n    initInnerButton('onSubmit'),\r\n    initInnerButton('onSearch'),\r\n    initInnerButton('onReset'),\r\n    initInnerButton('onAdd'),\r\n    initInnerButton('onBatchDelete'),\r\n    initInnerButton('onBack'),\r\n  ];\r\n});\r\n\r\n/**\r\n * 需要展示的操作按钮\r\n */\r\nconst validButtons = computed(() => {\r\n  return innerButtons.value\r\n    .concat(props.buttons)\r\n    .filter(button => {\r\n      return checkAuthoritys(checkAuthority, button.authority) && button.show !== false;\r\n    })\r\n    .sort((a, b) => sortByOrder(a.order, b.order))\r\n    .map(button => {\r\n      if (!button.key) {\r\n        button.key = Symbol();\r\n      }\r\n      return button;\r\n    });\r\n});\r\n\r\n/**\r\n * 内置按钮默认属性映射\r\n */\r\nconst innerButtonMap: {\r\n  onSubmit: DataFormButton<T>;\r\n  onReset: DataFormButton<T>;\r\n  onBack: DataFormButton<T>;\r\n  onAdd: DataFormButton<T>;\r\n  onSearch: DataFormButton<T>;\r\n  onBatchDelete: DataFormButton<T>;\r\n} = {\r\n  onSubmit: {\r\n    name: '提交',\r\n    type: 'primary',\r\n    order: 10,\r\n    validate: true,\r\n    key: Symbol(),\r\n  },\r\n  onSearch: {\r\n    name: '查询',\r\n    type: 'primary',\r\n    order: 20,\r\n    validate: true,\r\n    key: Symbol(),\r\n  },\r\n  onReset: {\r\n    name: '重置',\r\n    type: 'warning',\r\n    order: 30,\r\n    key: Symbol(),\r\n    // 内部已实现重置逻辑，只需设置showReset属性为true即可\r\n    onClick: () => resetFields(),\r\n  },\r\n  onAdd: {\r\n    name: '新增',\r\n    type: 'success',\r\n    order: 40,\r\n    key: Symbol(),\r\n  },\r\n  onBatchDelete: {\r\n    name: '批量删除',\r\n    type: 'danger',\r\n    order: 50,\r\n    key: Symbol(),\r\n  },\r\n  onBack: {\r\n    name: '返回',\r\n    order: 60,\r\n    key: Symbol(),\r\n  },\r\n};\r\n\r\n/**\r\n * 初始化内置按钮\r\n * @param type 需要初始化的内置按钮类型\r\n * @returns { DataFormButton<T> } 表单操作按钮\r\n */\r\nfunction initInnerButton(\r\n  type: 'onSubmit' | 'onSearch' | 'onReset' | 'onAdd' | 'onBatchDelete' | 'onBack',\r\n): DataFormButton<T> {\r\n  const button: DataFormButton<T> = {\r\n    ...innerButtonMap[type],\r\n  };\r\n  if (props[type]) {\r\n    // 有点击事件但没有拼接权限标识\r\n    button.onClick = props[type];\r\n    button.show = true;\r\n  } else {\r\n    const key = Object.keys(attrs).find(key => key.startsWith(type));\r\n    const regex = /\\((.*?)\\)/;\r\n    const matches = key?.match(regex);\r\n    if (matches && matches[1]) {\r\n      // 有点击事件并且拼接了权限标识\r\n      button.onClick = attrs[key!] as DataFormButton<T>['onClick'];\r\n      button.authority = matches[1].split('|');\r\n      button.show = true;\r\n    } else {\r\n      if (type === 'onReset' && propsProxy.showReset === true) {\r\n        button.show = true;\r\n      } else {\r\n        button.show = false;\r\n      }\r\n    }\r\n  }\r\n  return button;\r\n}\r\n\r\n/**\r\n * 处理按钮点击事件\r\n * @param button 点击的按钮\r\n */\r\nfunction handleButtonClick(button: DataFormButton<T>) {\r\n  if (button.validate) {\r\n    formRef.value?.validate((valid, _fields) => {\r\n      if (valid) {\r\n        triggerEvent(button);\r\n      }\r\n    });\r\n  } else {\r\n    triggerEvent(button);\r\n  }\r\n}\r\n\r\n/**\r\n * 触发事件\r\n * @param button 需要触发事件的按钮\r\n */\r\nfunction triggerEvent(button: DataFormButton<T>) {\r\n  // @ts-ignore\r\n  const result = button.onClick?.(formatFormData(), formRef.value);\r\n  if (result instanceof Promise) {\r\n    buttonLoadingStatus.value[button.key!] = true;\r\n    result\r\n      .then(res => {\r\n        if (typeof res === 'string') {\r\n          ElMessage.success(res);\r\n        }\r\n      })\r\n      .catch(err => {\r\n        if (typeof err === 'string') {\r\n          ElMessage.error(err);\r\n        } else {\r\n          throw err;\r\n        }\r\n      })\r\n      .finally(() => {\r\n        buttonLoadingStatus.value[button.key!] = false;\r\n      });\r\n  }\r\n}\r\n\r\n/**\r\n * 所有加密表单项的状态\r\n */\r\nconst ciphertextStatus = ref<{\r\n  [key: string]: boolean;\r\n}>({});\r\n\r\n/**\r\n * 获取加密表单项的prop属性值\r\n * @param field 表单项或虚拟节点\r\n */\r\nfunction getCiphertextProp(field: DataFormField<T> | VNode) {\r\n  if (isVNode(field)) {\r\n    return (field.props?.['field-type'] ?? field.props?.['fieldType']) === 'ciphertext'\r\n      ? field.props?.['prop']\r\n      : null;\r\n  } else {\r\n    return field.fieldType === 'ciphertext' ? field.prop : null;\r\n  }\r\n}\r\n\r\n/**\r\n * 所有加密表单项对应的prop属性集合\r\n */\r\nconst ciphertextKeys = computed(() => {\r\n  return validFields.value.flatMap(field => {\r\n    if (Array.isArray(field)) {\r\n      return field.map(getCiphertextProp).filter(Boolean);\r\n    } else {\r\n      return getCiphertextProp(field) ? [getCiphertextProp(field)] : [];\r\n    }\r\n  });\r\n});\r\n\r\n/**\r\n * 初始化所有加密表单项的状态\r\n */\r\nwatchEffect(() => {\r\n  ciphertextKeys.value.forEach(key => {\r\n    if (ciphertextStatus.value[key] === undefined) {\r\n      if (\r\n        formModel.value[key] === undefined ||\r\n        formModel.value[key] === null ||\r\n        formModel.value[key] === ''\r\n      ) {\r\n        // 默认设置为解密状态\r\n        ciphertextStatus.value[key] = true;\r\n      } else {\r\n        // 默认设置为未解密状态\r\n        ciphertextStatus.value[key] = false;\r\n      }\r\n    }\r\n  });\r\n});\r\n\r\n/**\r\n * 提供加密表单项状态信息\r\n */\r\nprovide(CIPHERTEXT_STATUS_KEY, ciphertextStatus);\r\n\r\n/**\r\n * 格式化表单数据\r\n * @remarks 过滤fields中未解密的字段\r\n */\r\nfunction formatFormData() {\r\n  const temp = { ...props.model };\r\n  Object.keys(temp).forEach(key => {\r\n    if (ciphertextStatus.value[key] === false) {\r\n      // 删除未解密的字段\r\n      delete temp[key];\r\n    }\r\n  });\r\n  return temp;\r\n}\r\n\r\n/**\r\n * 回车键事件\r\n */\r\nfunction handleSubmit() {\r\n  const searchButton = validButtons.value.find(button => button.name === '查询');\r\n  if (!searchButton) return;\r\n  handleButtonClick(searchButton);\r\n}\r\n\r\n/**\r\n * 校验表单\r\n * @param callback 校验结果\r\n */\r\nfunction validate(callback?: FormValidateCallback): FormValidationResult {\r\n  return formRef.value!.validate(callback);\r\n}\r\n\r\n/**\r\n * 校验部分字段\r\n * @param props 需要校验的字段\r\n * @param callback 校验结果\r\n */\r\nfunction validateField(\r\n  props?: FormItemProp | FormItemProp[] | undefined,\r\n  callback?: FormValidateCallback | undefined,\r\n): FormValidationResult {\r\n  return formRef.value!.validateField(props, callback);\r\n}\r\n\r\n/**\r\n * 滚动到指定字段\r\n * @param prop 需要滚动到的字段\r\n */\r\nfunction scrollToField(prop: FormItemProp): void {\r\n  formRef.value?.scrollToField(prop);\r\n}\r\n\r\n/**\r\n * 清空校验结果\r\n * @param props 需要清空校验结果的字段\r\n */\r\nfunction clearValidate(props?: FormItemProp | FormItemProp[] | undefined): void {\r\n  formRef.value?.clearValidate(props);\r\n}\r\n\r\n/**\r\n * 重置表单\r\n * @param props 需要重置的字段\r\n */\r\nfunction resetFields(props?: FormItemProp | FormItemProp[] | undefined): void {\r\n  formRef.value?.resetFields(props);\r\n}\r\n\r\n/**\r\n * 对外暴露的方法\r\n */\r\ndefineExpose({\r\n  validate,\r\n  validateField,\r\n  resetFields,\r\n  scrollToField,\r\n  clearValidate,\r\n});\r\n</script>\r\n"],"names":["_a","_b","key","props"],"mappings":"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"}