{"version":3,"file":"index.js","sources":["../../../../../../../packages/components/authority/src/directive/index.ts"],"sourcesContent":["import { CHECK_AUTHORITY_KEY } from '@liv-web/constants';\r\nimport { checkAuthoritys } from '@liv-web/utils';\r\nimport type { DirectiveBinding, ObjectDirective, VNode } from 'vue';\r\n\r\n/**\r\n * 自定义authority指令\r\n * 用于根据权限控制dom元素是否渲染\r\n * @example\r\n * ```html\r\n * <button v-authority=\"'superAdmin'\">查询</button>\r\n * <!-- 支持传入多个权限标识 -->\r\n * <button v-authority=\"['admin', 'superAdmin']\">查询</button>\r\n * ```\r\n */\r\nexport const vAuthority: ObjectDirective = {\r\n  mounted: (el: HTMLElement, binding: DirectiveBinding, vnode: VNode) => {\r\n    if (binding.value) {\r\n      // @ts-ignore\r\n      const checkAuthority = vnode.ctx.provides[CHECK_AUTHORITY_KEY].checkAuthority;\r\n      if (!checkAuthority) {\r\n        Promise.reject(\r\n          new Error('[liv-web/utils]没有提供校验权限方法，请检查是否已经注入相关方法。'),\r\n        );\r\n        return;\r\n      }\r\n      const isAuthority = checkAuthoritys(checkAuthority, binding.value);\r\n      if (!isAuthority) {\r\n        el.parentNode?.removeChild(el);\r\n      }\r\n    }\r\n  },\r\n};\r\n"],"names":["CHECK_AUTHORITY_KEY","checkAuthoritys"],"mappings":";;;;;;;AAcO,MAAM,UAA8B,GAAA;AAAA,EACzC,OAAS,EAAA,CAAC,EAAiB,EAAA,OAAA,EAA2B,KAAiB,KAAA;AAfzE,IAAA,IAAA,EAAA,CAAA;AAgBI,IAAA,IAAI,QAAQ,KAAO,EAAA;AAEjB,MAAA,MAAM,cAAiB,GAAA,KAAA,CAAM,GAAI,CAAA,QAAA,CAASA,6BAAmB,CAAE,CAAA,cAAA,CAAA;AAC/D,MAAA,IAAI,CAAC,cAAgB,EAAA;AACnB,QAAQ,OAAA,CAAA,MAAA;AAAA,UACN,IAAI,MAAM,uKAA0C,CAAA;AAAA,SACtD,CAAA;AACA,QAAA,OAAA;AAAA,OACF;AACA,MAAA,MAAM,WAAc,GAAAC,qBAAA,CAAgB,cAAgB,EAAA,OAAA,CAAQ,KAAK,CAAA,CAAA;AACjE,MAAA,IAAI,CAAC,WAAa,EAAA;AAChB,QAAG,CAAA,EAAA,GAAA,EAAA,CAAA,UAAA,KAAH,mBAAe,WAAY,CAAA,EAAA,CAAA,CAAA;AAAA,OAC7B;AAAA,KACF;AAAA,GACF;AACF;;;;"}