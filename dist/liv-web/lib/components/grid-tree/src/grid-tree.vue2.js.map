{"version":3,"file":"grid-tree.vue2.js","sources":["../../../../../../packages/components/grid-tree/src/grid-tree.vue"],"sourcesContent":["<template>\r\n  <el-tree\r\n    ref=\"treeRef\"\r\n    class=\"liv-grid-tree\"\r\n    :load=\"load\"\r\n    :props=\"treeProps\"\r\n    lazy\r\n    showCheckbox\r\n    checkStrictly\r\n    :defaultExpandedKeys\r\n    :node-key=\"treeProps.value\"\r\n    @check-change=\"handleCheckChange\"\r\n    v-bind=\"omit({ ...globalProps, ...attrs }, 'props')\">\r\n    <template v-for=\"(_, name) in $slots\" #[name]=\"slotData\">\r\n      <slot :name=\"name\" v-bind=\"slotData || {}\" />\r\n    </template>\r\n  </el-tree>\r\n</template>\r\n\r\n<script lang=\"ts\" setup generic=\"T extends Record<string | number | symbol, any>\">\r\nimport { inject, nextTick, onMounted, ref, useAttrs, watch } from 'vue';\r\nimport { ElTree } from 'element-plus';\r\nimport Node from 'element-plus/es/components/tree/src/model/node';\r\nimport type { TreeInstance } from 'element-plus';\r\nimport type { TreeKey } from 'element-plus/es/components/tree/src/tree.type';\r\nimport { omit } from 'lodash-es';\r\nimport type { GridTreeFullProps, GridTreeProps, TreePropsProps } from './grid-tree';\r\nimport {\r\n  type CommonRequired,\r\n  getPropsPoxy,\r\n  injectLoadUserGrid,\r\n  injectLoadRootGrid,\r\n  injectLoadGridChildrenByCode,\r\n  injectLoadGridById,\r\n  injectLoadGridTreeByCode,\r\n  MakeRequired,\r\n} from '@liv-web/utils';\r\nimport { GRID_TREE_KEY } from '@liv-web/constants';\r\n\r\n/**\r\n * 组件选项\r\n */\r\ndefineOptions({\r\n  name: 'LivGridTree',\r\n});\r\n\r\n/**\r\n * 必须注入该方法用于懒加载数据\r\n */\r\nconst loadGridChildrenByCode = injectLoadGridChildrenByCode<T[]>();\r\n\r\n/**\r\n * root属性传入false时必须注入该方法\r\n */\r\nconst loadUserGrid = injectLoadUserGrid<T>();\r\n\r\n/**\r\n * root属性传入true时必须注入该方法\r\n */\r\nconst loadRootGrid = injectLoadRootGrid<T>();\r\n\r\n/**\r\n * 需要通过v-model:grid-id回显时必须注入该方法\r\n */\r\nconst loadGridById = injectLoadGridById<T>();\r\n\r\n/**\r\n * 需要通过v-model回显时必须注入该方法\r\n */\r\nconst loadGridTreeByCode = injectLoadGridTreeByCode<T[]>();\r\n\r\n/**\r\n * 注入全局属性\r\n */\r\nconst globalProps = inject(GRID_TREE_KEY, {}) as GridTreeFullProps<T>;\r\n\r\n/**\r\n * 组件属性\r\n */\r\nconst props = withDefaults(defineProps<GridTreeProps<T>>(), {\r\n  root: () => false,\r\n});\r\n\r\n/**\r\n * 属性代理\r\n */\r\nconst propsProxy = getPropsPoxy<MakeRequired<GridTreeFullProps<T>, 'root'>>(props, globalProps);\r\n\r\n/**\r\n * 透传属性\r\n */\r\nconst attrs = useAttrs();\r\n\r\n/**\r\n * 组件实例\r\n */\r\nconst treeRef = ref<TreeInstance | null>(null);\r\n\r\n/**\r\n * v-model绑定值\r\n */\r\nconst gridCode = defineModel<string | number>();\r\n\r\n/**\r\n * v-model:grid-id绑定值\r\n */\r\nconst gridId = defineModel<string | number>('gridId');\r\n\r\n/**\r\n * v-model:grid-name绑定值\r\n */\r\nconst gridName = defineModel<string>('gridName');\r\n\r\n/**\r\n * v-model:grid绑定值\r\n */\r\nconst grid = defineModel<T>('grid');\r\n\r\n/**\r\n * 网格树配置选项\r\n */\r\nconst treeProps: CommonRequired<\r\n  TreePropsProps,\r\n  {\r\n    id: string;\r\n    label: string;\r\n    children: string;\r\n    value: string;\r\n    isLeaf: string;\r\n    disabled: string;\r\n  }\r\n> = {\r\n  id: 'id',\r\n  label: 'label',\r\n  children: 'children',\r\n  value: 'value',\r\n  isLeaf: 'isLeaf',\r\n  disabled: 'disabled',\r\n  ...globalProps?.props,\r\n  ...((attrs.props as TreePropsProps) || {}),\r\n};\r\n\r\n/**\r\n * 默认展开节点数组\r\n */\r\nconst defaultExpandedKeys = ref<TreeKey[]>([]);\r\n\r\n/**\r\n * 对外暴露的属性及方法\r\n */\r\nconst expose = {\r\n  ...treeRef.value,\r\n};\r\n\r\ndefineExpose(expose);\r\n\r\nonMounted(() => {\r\n  Object.assign(expose, treeRef.value);\r\n});\r\n\r\nfunction handleCheckChange(data: T, checked: boolean) {\r\n  if (checked) {\r\n    // 设置只能选中单个\r\n    treeRef.value?.setCheckedKeys([data[treeProps.value]]);\r\n    gridCode.value = data[treeProps.value];\r\n  } else {\r\n    if (treeRef.value?.getCheckedNodes().length == 0) {\r\n      gridCode.value = '';\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 根据gridCode初始化组件数据\r\n */\r\nwatch(gridCode, value => {\r\n  initTree(value);\r\n});\r\n\r\n/**\r\n * gridId修改后同步修改gridCode\r\n */\r\nwatch(\r\n  gridId,\r\n  async (newValue, oldValue) => {\r\n    if (newValue !== oldValue) {\r\n      const checkNode = treeRef.value?.getNode(gridCode.value as TreeKey);\r\n      if (checkNode?.data?.[treeProps.id] !== newValue) {\r\n        // 当前选中节点的gridId与修改后的gridId不一致\r\n        if (newValue) {\r\n          const grid = await loadGridById(newValue);\r\n          gridCode.value = grid[treeProps.value];\r\n        } else {\r\n          gridCode.value = newValue;\r\n        }\r\n      }\r\n    }\r\n  },\r\n  {\r\n    immediate: true,\r\n  },\r\n);\r\n\r\n/**\r\n * 根据gridCode的值初始化其他model值\r\n */\r\nasync function initModelByGridCode() {\r\n  const checkNode = treeRef.value?.getNode(gridCode.value as TreeKey);\r\n  if (gridCode.value && checkNode) {\r\n    grid.value = checkNode.data as T;\r\n    gridName.value = (checkNode.data as T)[treeProps.label];\r\n    gridId.value = (checkNode.data as T)[treeProps.id];\r\n  } else {\r\n    grid.value = undefined;\r\n    gridName.value = '';\r\n    gridId.value = gridCode.value;\r\n  }\r\n}\r\n\r\n/**\r\n * 初始化树\r\n * @param gridCode 网格编码\r\n */\r\nasync function initTree(gridCode: string | number | undefined) {\r\n  if (gridCode) {\r\n    const node = treeRef.value?.getNode(gridCode);\r\n    if (!node) {\r\n      // 当前节点不存在\r\n      const grids = await getInitData();\r\n      // 先清空展开节点，避免触发load方法\r\n      defaultExpandedKeys.value = [];\r\n      await nextTick();\r\n      const codes = getDeepestGridCodes(grids[0]);\r\n      treeRef.value?.updateKeyChildren(codes[0], grids[0][treeProps.children]);\r\n      defaultExpandedKeys.value = codes;\r\n      treeRef.value?.setCheckedKeys([gridCode]);\r\n    } else {\r\n      // 当前节点存在\r\n      defaultExpandedKeys.value = [];\r\n      await nextTick();\r\n      defaultExpandedKeys.value = [node?.parent?.data?.gridCode];\r\n      treeRef.value?.setCheckedKeys([gridCode]);\r\n    }\r\n    await nextTick();\r\n    initModelByGridCode();\r\n  } else {\r\n    treeRef.value?.setCheckedKeys([]);\r\n    initModelByGridCode();\r\n  }\r\n}\r\n\r\n/**\r\n * 获取初始网格数据\r\n * @returns { Promise<T[]> } 网格树数组\r\n */\r\nasync function getInitData(): Promise<T[]> {\r\n  if (gridCode.value) {\r\n    if (propsProxy.root) {\r\n      const rootGrid = await loadRootGrid();\r\n      return await loadGridTreeByCode(rootGrid[treeProps.value], gridCode.value);\r\n    } else {\r\n      const userGird = await loadUserGrid();\r\n      return await loadGridTreeByCode(userGird[treeProps.value], gridCode.value);\r\n    }\r\n  } else if (propsProxy.root) {\r\n    // 查询根网格\r\n    const grid = await loadRootGrid();\r\n    return [grid];\r\n  } else {\r\n    // 查询用户所属网格\r\n    const grid = await loadUserGrid();\r\n    return [grid];\r\n  }\r\n}\r\n\r\n/**\r\n * 加载树节点\r\n * @param node 树节点\r\n * @param resolve 回调函数\r\n */\r\nasync function load(node: Node, resolve: (data: T[]) => void) {\r\n  if (node.level === 0) {\r\n    const grids = await getInitData();\r\n    resolve(grids);\r\n    if (gridCode.value) {\r\n      const codes = getDeepestGridCodes(grids[0]);\r\n      defaultExpandedKeys.value = codes;\r\n      treeRef.value?.setCheckedKeys([gridCode.value]);\r\n      await nextTick();\r\n      initModelByGridCode();\r\n    }\r\n  } else {\r\n    if (node.data[treeProps.children]?.length) {\r\n      // 已有children\r\n      resolve(node.data[treeProps.children]);\r\n    } else {\r\n      // 加载children\r\n      const grids = await loadGridChildrenByCode(node.data[treeProps.value]);\r\n      resolve(grids);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 获取网格树最深层叶节点的父节点组成的node-key数组\r\n * @param gridTree 网格树\r\n * @returns node-key数组\r\n */\r\nfunction getDeepestGridCodes(gridTree: T) {\r\n  const deepestGridCodes: T[keyof T][] = [];\r\n\r\n  function traverse(grid: T, gridCodes: T[keyof T][]) {\r\n    // 将当前节点添加到当前路径中\r\n    gridCodes.push(grid[treeProps.value]);\r\n    const children: T[] = grid[treeProps.children];\r\n    if (!children || (Array.isArray(children) && children.length === 0)) {\r\n      // 当前节点是叶子节点\r\n      if (gridCodes.length - 1 > deepestGridCodes.length) {\r\n        // 如果当前路径比已知的最长路径还长，更新最长路径\r\n        deepestGridCodes.splice(0, deepestGridCodes.length, ...gridCodes.slice(0, -1));\r\n      }\r\n    } else {\r\n      // 遍历子节点\r\n      children.forEach(child => {\r\n        traverse(child, gridCodes);\r\n      });\r\n    }\r\n\r\n    // 在回溯时移除当前节点\r\n    gridCodes.pop();\r\n  }\r\n\r\n  traverse(gridTree, []);\r\n  return deepestGridCodes;\r\n}\r\n</script>\r\n"],"names":["injectLoadGridChildrenByCode","injectLoadUserGrid","injectLoadRootGrid","injectLoadGridById","injectLoadGridTreeByCode","inject","GRID_TREE_KEY","getPropsPoxy","useAttrs","ref","_useModel","grid","onMounted","watch","gridCode","nextTick"],"mappings":"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"}