{"version":3,"file":"grid-cascader.vue2.js","sources":["../../../../../../packages/components/grid-cascader/src/grid-cascader.vue"],"sourcesContent":["<template>\r\n  <el-cascader\r\n    ref=\"cascaderRef\"\r\n    class=\"liv-grid-cascader\"\r\n    :modelValue=\"gridCode\"\r\n    @update:modelValue=\"updateModelValue\"\r\n    :options=\"options\"\r\n    :props=\"cascaderProps\"\r\n    placeholder=\"请选择\"\r\n    v-bind=\"omit({ ...globalProps, ...attrs }, 'props')\">\r\n    <template v-for=\"(_, name) in $slots\" #[name]=\"slotData\">\r\n      <slot :name=\"name\" v-bind=\"slotData || {}\" />\r\n    </template>\r\n  </el-cascader>\r\n</template>\r\n\r\n<script lang=\"ts\" setup generic=\"T extends Record<string | number | symbol, any>\">\r\nimport { type Ref, ref, useAttrs, watchEffect, watch, inject } from 'vue';\r\nimport { ElCascader } from 'element-plus';\r\nimport { omit } from 'lodash-es';\r\nimport type { CascaderInstance, CascaderNode, CascaderValue, isLeaf } from 'element-plus';\r\nimport type { GridCascaderProps, CascaderPropsProps, GridCascaderFullProps } from './grid-cascader';\r\nimport {\r\n  type CommonRequired,\r\n  getPropsPoxy,\r\n  injectLoadGridByCode,\r\n  injectLoadGridById,\r\n  injectLoadGridChildrenByCode,\r\n  injectLoadGridTreeByCode,\r\n  injectLoadRootGrid,\r\n  injectLoadUserGrid,\r\n  MakeRequired,\r\n} from '@liv-web/utils';\r\nimport { GRID_CASCADER_KEY } from '@liv-web/constants';\r\n\r\n/**\r\n * 组件配置\r\n */\r\ndefineOptions({\r\n  name: 'LivGridCascader',\r\n  // 关闭属性透传，手动通过v-bind实现属性透传。因为开启属性透传后，外部透传的props优先级最高，即使内部处理props重新赋值给el-cascader也不生效。\r\n  inheritAttrs: false,\r\n});\r\n\r\n/**\r\n * 必须注入该方法用于懒加载数据\r\n */\r\nconst loadGridChildrenByCode = injectLoadGridChildrenByCode<T[]>();\r\n\r\n/**\r\n * root属性传入false时必须注入该方法\r\n */\r\nconst loadUserGrid = injectLoadUserGrid<T>();\r\n\r\n/**\r\n * root属性传入true时必须注入该方法\r\n */\r\nconst loadRootGrid = injectLoadRootGrid<T>();\r\n\r\n/**\r\n * root属性传入false时必须注入该方法\r\n */\r\nconst loadGridByCode = injectLoadGridByCode<T>();\r\n\r\n/**\r\n * 需要通过v-model:grid-id回显时必须注入该方法\r\n */\r\nconst loadGridById = injectLoadGridById<T>();\r\n\r\n/**\r\n * 需要通过v-model回显时必须注入该方法\r\n */\r\nconst loadGridTreeByCode = injectLoadGridTreeByCode<T[]>();\r\n\r\n/**\r\n * 注入全局属性\r\n */\r\nconst globalProps = inject(GRID_CASCADER_KEY, {}) as GridCascaderFullProps<T>;\r\n\r\n/**\r\n * 组件属性\r\n */\r\nconst props = withDefaults(defineProps<GridCascaderProps<T>>(), {\r\n  root: () => false,\r\n});\r\n\r\n/**\r\n * 属性代理\r\n */\r\nconst propsProxy = getPropsPoxy<MakeRequired<GridCascaderFullProps<T>, 'root'>>(props, globalProps);\r\n\r\n/**\r\n * 透传属性\r\n */\r\nconst attrs = useAttrs();\r\n\r\n/**\r\n * 组件实例\r\n */\r\nconst cascaderRef = ref<CascaderInstance | null>(null);\r\n\r\n/**\r\n * 组件数据\r\n */\r\nconst options: Ref<T[]> = ref([]);\r\n\r\n/**\r\n * v-model绑定值\r\n */\r\nconst gridCode = defineModel<CascaderValue>();\r\n\r\n/**\r\n * v-model:grid-id绑定值\r\n */\r\nconst gridId = defineModel<CascaderValue>('gridId');\r\n\r\n/**\r\n * v-model:grid-name绑定值\r\n */\r\nconst gridName = defineModel<CascaderValue>('gridName');\r\n\r\n/**\r\n * v-model:grid绑定值\r\n */\r\nconst grid = defineModel<T | T[] | T[][]>('grid');\r\n\r\n/**\r\n * 级联选择器默认属性\r\n */\r\nconst cascaderProps: CommonRequired<\r\n  CascaderPropsProps,\r\n  {\r\n    label: string;\r\n    value: string;\r\n    id: string;\r\n    children: string;\r\n    leaf: string | isLeaf;\r\n  }\r\n> = {\r\n  multiple: false,\r\n  checkStrictly: true,\r\n  lazy: true,\r\n  emitPath: false,\r\n  label: 'label',\r\n  value: 'value',\r\n  id: 'id',\r\n  children: 'children',\r\n  leaf: 'leaf',\r\n  lazyLoad: async (node, resolve) => {\r\n    const { isLeaf, children, level, value } = node;\r\n    if (node?.children?.length || !level) return resolve([]);\r\n    if (!isLeaf && children.length === 0) {\r\n      resolve(await loadGridChildrenByCode(value));\r\n    }\r\n  },\r\n  ...globalProps?.props,\r\n  ...((attrs.props as CascaderPropsProps) || {}),\r\n};\r\n\r\n/**\r\n * gridCode改变后是否触发副作用\r\n */\r\nconst noEffectGridCode = ref(false);\r\n\r\n/**\r\n * gridId改变后是否触发副作用\r\n */\r\nconst noEffectGridId = ref(false);\r\n\r\n/**\r\n * 组件v-model绑定值更新回调方法\r\n * @param value 更新值\r\n */\r\nfunction updateModelValue(value: CascaderValue) {\r\n  // 用户手动选中，不用触发副作用重新加载数据\r\n  noEffectGridCode.value = true;\r\n  gridCode.value = value;\r\n}\r\n\r\n/**\r\n * 切换 popper 可见状态\r\n * @param visibile 是否可见\r\n */\r\nfunction togglePopperVisible(visibile?: boolean) {\r\n  cascaderRef.value?.togglePopperVisible(visibile);\r\n}\r\n\r\n/**\r\n * 获取已选中节点\r\n * @param leafOnly 仅获取叶节点\r\n * @returns { CascaderNode[] } 选中的节点数组\r\n */\r\nfunction getCheckedNodes(leafOnly: boolean = false) {\r\n  return cascaderRef.value?.getCheckedNodes(leafOnly);\r\n}\r\n\r\n/**\r\n * 获取已选中节点(异步返回)\r\n * @returns { Promise<CascaderNode[]> } 已选中的节点数组\r\n */\r\nfunction getCheckedNodesAsync() {\r\n  return new Promise<CascaderNode[]>(resolve => {\r\n    if (\r\n      (!Array.isArray(gridCode.value) && gridCode.value) ||\r\n      (Array.isArray(gridCode.value) && gridCode.value.length > 0)\r\n    ) {\r\n      const timer = setInterval(() => {\r\n        if (cascaderRef.value?.getCheckedNodes(false)?.length ?? 0 > 0) {\r\n          // 组件内部选中状态已更新\r\n          clearInterval(timer);\r\n          resolve(cascaderRef.value?.getCheckedNodes(false) ?? []);\r\n        }\r\n      }, 10);\r\n    } else {\r\n      resolve([]);\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * 根据gridCode初始化组件数据，仅外部修改gridCode值时触发\r\n */\r\nwatchEffect(async () => {\r\n  if (!noEffectGridCode.value) {\r\n    if (cascaderProps.multiple && cascaderProps.emitPath) {\r\n      if (Array.isArray(gridCode.value) && gridCode.value.length > 0) {\r\n        initDataByGridCodes(gridCode.value.map(codes => (codes as []).slice(-1)[0]));\r\n      } else {\r\n        initData();\r\n      }\r\n    } else if (cascaderProps.multiple && !cascaderProps.emitPath) {\r\n      if (Array.isArray(gridCode.value) && gridCode.value.length > 0) {\r\n        initDataByGridCodes(gridCode.value as string[] | number[]);\r\n      } else {\r\n        initData();\r\n      }\r\n    } else if (!cascaderProps.multiple && cascaderProps.emitPath) {\r\n      if (Array.isArray(gridCode.value) && gridCode.value.length > 0) {\r\n        initDataByGridCodes(gridCode.value.slice(-1) as string[] | number[]);\r\n      } else {\r\n        initData();\r\n      }\r\n    } else {\r\n      if (gridCode.value && !Array.isArray(gridCode.value)) {\r\n        initDataByGridCodes([gridCode.value] as string[] | number[]);\r\n      } else {\r\n        initData();\r\n      }\r\n    }\r\n  } else {\r\n    noEffectGridCode.value = false;\r\n  }\r\n});\r\n\r\n/**\r\n * 监听gridCode值改变并更新其他model值\r\n */\r\nwatch(gridCode, (newValue, oldValue) => {\r\n  if (newValue?.toString() !== oldValue?.toString()) {\r\n    initModelByGridCode();\r\n  }\r\n});\r\n\r\n/**\r\n * 根据gridCode的值初始化其他model值\r\n */\r\nasync function initModelByGridCode() {\r\n  noEffectGridId.value = true;\r\n  const checkNodes = await getCheckedNodesAsync();\r\n  if (cascaderProps.multiple && cascaderProps.emitPath) {\r\n    if (Array.isArray(gridCode.value) && gridCode.value.length > 0) {\r\n      grid.value = checkNodes.map(node => node.pathNodes.map(node => node.data as T));\r\n      gridName.value = checkNodes.map(node =>\r\n        node.pathNodes.map(node => (node.data as T)[cascaderProps.label]),\r\n      );\r\n      gridId.value = checkNodes.map(node =>\r\n        node.pathNodes.map(node => (node.data as T)[cascaderProps.id]),\r\n      );\r\n    } else {\r\n      grid.value = [];\r\n      gridName.value = [];\r\n      gridId.value = [];\r\n    }\r\n  } else if (cascaderProps.multiple && !cascaderProps.emitPath) {\r\n    if (Array.isArray(gridCode.value) && gridCode.value.length > 0) {\r\n      grid.value = checkNodes.map(node => node.data as T);\r\n      gridName.value = checkNodes.map(node => (node.data as T)[cascaderProps.label]);\r\n      gridId.value = checkNodes.map(node => (node.data as T)[cascaderProps.id]);\r\n    } else {\r\n      grid.value = [];\r\n      gridName.value = [];\r\n      gridId.value = [];\r\n    }\r\n  } else if (!cascaderProps.multiple && cascaderProps.emitPath) {\r\n    if (Array.isArray(gridCode.value) && gridCode.value.length > 0) {\r\n      grid.value = checkNodes[0].pathNodes.map(node => node.data as T);\r\n      gridName.value = checkNodes[0].pathNodes.map(node => (node.data as T)[cascaderProps.label]);\r\n      gridId.value = checkNodes[0].pathNodes.map(node => (node.data as T)[cascaderProps.id]);\r\n    } else {\r\n      grid.value = [];\r\n      gridName.value = [];\r\n      gridId.value = [];\r\n    }\r\n  } else {\r\n    if (gridCode.value && !Array.isArray(gridCode.value)) {\r\n      grid.value = checkNodes[0].data as T;\r\n      gridName.value = (checkNodes[0].data as T)[cascaderProps.label];\r\n      gridId.value = (checkNodes[0].data as T)[cascaderProps.id];\r\n    } else {\r\n      grid.value = undefined;\r\n      gridName.value = '';\r\n      gridId.value = gridCode.value;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 根据gridId值初始化组件数据，仅外部修改gridId值时触发\r\n */\r\nwatch(\r\n  gridId,\r\n  async (newValue, oldValue) => {\r\n    if (!noEffectGridId.value && newValue !== oldValue) {\r\n      if (cascaderProps.multiple && cascaderProps.emitPath) {\r\n        if (Array.isArray(gridId.value) && gridId.value.length > 0) {\r\n          Promise.all(\r\n            gridId.value.map(async ids => {\r\n              return Promise.all(\r\n                (ids as number[] | string[]).map(async id => {\r\n                  return (await loadGridById(id))[cascaderProps.value];\r\n                }),\r\n              );\r\n            }),\r\n          ).then(res => {\r\n            gridCode.value = res;\r\n          });\r\n        } else {\r\n          gridCode.value = [];\r\n        }\r\n      } else if (\r\n        (cascaderProps.multiple && !cascaderProps.emitPath) ||\r\n        (!cascaderProps.multiple && cascaderProps.emitPath)\r\n      ) {\r\n        if (Array.isArray(gridId.value) && gridId.value.length > 0) {\r\n          Promise.all(\r\n            gridId.value.map(async id => {\r\n              return (await loadGridById(id as string | number))[cascaderProps.value];\r\n            }),\r\n          ).then(res => {\r\n            gridCode.value = res;\r\n          });\r\n        } else {\r\n          gridCode.value = [];\r\n        }\r\n      } else {\r\n        if (gridId.value && !Array.isArray(gridId.value)) {\r\n          gridCode.value = (await loadGridById(gridId.value))[cascaderProps.value];\r\n        } else {\r\n          gridCode.value = gridId.value;\r\n        }\r\n      }\r\n    } else {\r\n      noEffectGridId.value = false;\r\n    }\r\n  },\r\n  {\r\n    immediate: true,\r\n  },\r\n);\r\n\r\n/**\r\n * 监听gridId值改变并更新其他model值\r\n */\r\nwatch(gridId, (newValue, oldValue) => {\r\n  if (newValue?.toString() !== oldValue?.toString()) {\r\n    initModelByGridId();\r\n  }\r\n});\r\n\r\n/**\r\n * 根据gridId的值初始化其他model值\r\n */\r\nasync function initModelByGridId() {\r\n  noEffectGridCode.value = true;\r\n  const checkNodes = await getCheckedNodesAsync();\r\n  if (cascaderProps.multiple && cascaderProps.emitPath) {\r\n    if (Array.isArray(gridId.value) && gridId.value.length > 0) {\r\n      grid.value = checkNodes.map(node => node.pathNodes.map(node => node.data as T));\r\n      gridName.value = checkNodes.map(node =>\r\n        node.pathNodes.map(node => (node.data as T)[cascaderProps.label]),\r\n      );\r\n      gridCode.value = checkNodes.map(node =>\r\n        node.pathNodes.map(node => (node.data as T)[cascaderProps.value]),\r\n      );\r\n    } else {\r\n      grid.value = [];\r\n      gridName.value = [];\r\n      gridCode.value = [];\r\n    }\r\n  } else if (cascaderProps.multiple && !cascaderProps.emitPath) {\r\n    if (Array.isArray(gridId.value) && gridId.value.length > 0) {\r\n      grid.value = checkNodes.map(node => node.data as T);\r\n      gridName.value = checkNodes.map(node => (node.data as T)[cascaderProps.label]);\r\n      gridCode.value = checkNodes.map(node => (node.data as T)[cascaderProps.value]);\r\n    } else {\r\n      grid.value = [];\r\n      gridName.value = [];\r\n      gridCode.value = [];\r\n    }\r\n  } else if (!cascaderProps.multiple && cascaderProps.emitPath) {\r\n    if (Array.isArray(gridId.value) && gridId.value.length > 0) {\r\n      grid.value = checkNodes[0].pathNodes.map(node => node.data as T);\r\n      gridName.value = checkNodes[0].pathNodes.map(node => (node.data as T)[cascaderProps.label]);\r\n      gridCode.value = checkNodes[0].pathNodes.map(node => (node.data as T)[cascaderProps.value]);\r\n    } else {\r\n      grid.value = [];\r\n      gridName.value = [];\r\n      gridCode.value = [];\r\n    }\r\n  } else {\r\n    if (gridId.value && !Array.isArray(gridId.value)) {\r\n      grid.value = checkNodes[0].data as T;\r\n      gridName.value = (checkNodes[0].data as T)[cascaderProps.label];\r\n      gridCode.value = (checkNodes[0].data as T)[cascaderProps.value];\r\n    } else {\r\n      grid.value = undefined;\r\n      gridName.value = '';\r\n      gridCode.value = gridId.value;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 初始化数据\r\n */\r\nasync function initData() {\r\n  if (propsProxy.rootCode) {\r\n    loadGridByCode(propsProxy.rootCode).then(res => {\r\n      options.value = [res];\r\n    });\r\n  } else if (propsProxy.root) {\r\n    loadRootGrid().then(res => {\r\n      options.value = [res];\r\n    });\r\n  } else {\r\n    loadGridByCode((await loadUserGrid())[cascaderProps.value]).then(res => {\r\n      options.value = [res];\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * 根据gridCode数组初始化数据\r\n * @param gridCodes 选中的gridCode数组\r\n */\r\nasync function initDataByGridCodes(gridCodes: string[] | number[]) {\r\n  const rootCode = propsProxy.rootCode\r\n    ? propsProxy.rootCode\r\n    : (propsProxy.root ? await loadRootGrid() : await loadUserGrid())[cascaderProps.value];\r\n  Promise.all(\r\n    gridCodes.map(targetCode => {\r\n      return loadGridTreeByCode(rootCode, targetCode);\r\n    }),\r\n  ).then(res => {\r\n    options.value = mergeGridTrees(res);\r\n    if (gridCodes.length > 0) {\r\n      initModelByGridCode();\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * 合并多棵同层级的网格树\r\n * @param { T[][] } trees 需要合并的网格树数组\r\n * @returns { T[] } 合并后的网格树\r\n */\r\nfunction mergeGridTrees(trees: T[][]) {\r\n  return trees.reduce((pre, cur, index) => {\r\n    if (index === 0) {\r\n      return cur;\r\n    } else {\r\n      return mergeChildren(pre, cur);\r\n    }\r\n  }, []);\r\n}\r\n\r\n/**\r\n * 合并两个网格集合\r\n * @param { T[] } children1 需要合并的网格集合\r\n * @param { T[] } children2 需要合并的网格集合\r\n * @returns { T[] } 合并后的网格集合\r\n */\r\nfunction mergeChildren(children1: T[], children2: T[]) {\r\n  for (const child1 of children1) {\r\n    const child2 = children2.find(\r\n      child2 => child1[cascaderProps.value] === child2[cascaderProps.value],\r\n    );\r\n    if (!child2) continue;\r\n    if (child1[cascaderProps.children] && child2[cascaderProps.children]) {\r\n      mergeChildren(child1[cascaderProps.children], child2[cascaderProps.children]);\r\n    } else if (!child1[cascaderProps.children] && child2[cascaderProps.children]) {\r\n      // @ts-ignore\r\n      child1[cascaderProps.children] = child2[cascaderProps.children];\r\n    }\r\n  }\r\n  return children1;\r\n}\r\n\r\n/**\r\n * 对外暴露的方法\r\n */\r\ndefineExpose({\r\n  togglePopperVisible,\r\n  getCheckedNodes,\r\n});\r\n</script>\r\n"],"names":["injectLoadGridChildrenByCode","injectLoadUserGrid","injectLoadRootGrid","injectLoadGridByCode","injectLoadGridById","injectLoadGridTreeByCode","inject","GRID_CASCADER_KEY","getPropsPoxy","useAttrs","ref","_useModel","grid","watchEffect","watch","node","child2"],"mappings":"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"}