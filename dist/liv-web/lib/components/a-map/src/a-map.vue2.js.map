{"version":3,"file":"a-map.vue2.js","sources":["../../../../../../packages/components/a-map/src/a-map.vue"],"sourcesContent":["<template>\r\n  <div class=\"liv-a-map\">\r\n    <div :id=\"mapId\" class=\"liv-a-map__container\"></div>\r\n    <el-popover\r\n      v-if=\"layersControl && layersButtons.length > 0\"\r\n      placement=\"right\"\r\n      width=\"fit-content\"\r\n      trigger=\"hover\">\r\n      <template #reference>\r\n        <div\r\n          class=\"liv-a-map__layers-control\"\r\n          :style=\"{\r\n            backgroundImage: `url(${\r\n              layersButtons[layersIndex].image ??\r\n              getLayersButtonImage(layersButtons[layersIndex].layers)\r\n            })`,\r\n          }\">\r\n          <span class=\"liv-a-map__layers-button--title\">{{ layersButtons[layersIndex].name }}</span>\r\n        </div>\r\n      </template>\r\n      <template #default>\r\n        <div class=\"liv-a-map__control-container\">\r\n          <div\r\n            v-for=\"(button, index) in layersButtons\"\r\n            class=\"liv-a-map__layers-button\"\r\n            :style=\"{\r\n              backgroundImage: `url(${button.image ?? getLayersButtonImage(button.layers)})`,\r\n            }\"\r\n            :key=\"index\"\r\n            @click=\"layersIndex = index\">\r\n            <span class=\"liv-a-map__layers-button--title\">{{ button.name }}</span>\r\n          </div>\r\n        </div>\r\n      </template>\r\n    </el-popover>\r\n  </div>\r\n</template>\r\n\r\n<script setup lang=\"ts\">\r\nimport { watch, onMounted, onUnmounted, shallowRef, inject, computed } from 'vue';\r\nimport { ElPopover } from 'element-plus';\r\nimport type { AMapProps, AMapEmits, AMapLayerType, AMapLayer } from './a-map';\r\n// @ts-ignore\r\nimport vector from '../../assets/a-map/vector.png';\r\n// @ts-ignore\r\nimport satellite from '../../assets/a-map/satellite.png';\r\nimport { A_MAP_KEY } from '@liv-web/constants';\r\nimport { getPropsPoxy } from '@liv-web/utils';\r\nimport { useDarkModeObserver } from '@liv-web/utils'\r\n\r\ndefineOptions({\r\n  name: 'LivAMap',\r\n});\r\n\r\n/**\r\n * 注入全局属性\r\n */\r\nconst globalProps = inject<AMapProps>(A_MAP_KEY, {});\r\n\r\n/**\r\n * 组件属性\r\n */\r\nconst props = withDefaults(defineProps<AMapProps>(), {\r\n  layers: () => ['default'],\r\n  layersButtons: () => [\r\n    {\r\n      name: '矢量',\r\n      image: vector,\r\n      layers: ['default'],\r\n    },\r\n    {\r\n      name: '卫星',\r\n      image: satellite,\r\n      layers: ['default', 'satellite'],\r\n    },\r\n  ],\r\n});\r\n\r\n/**\r\n * 属性代理\r\n */\r\nconst propsProxy = getPropsPoxy<AMapProps>(props, globalProps);\r\n\r\nconst emit = defineEmits<AMapEmits>();\r\n\r\ntype Layer = Required<AMap.MapOptions>['layers'][number];\r\n\r\nlet AMapInstance = shallowRef<AMap.NameSpace | null>(null);\r\n// 地图实例\r\nlet map: AMap.Map | null = null;\r\n// 默认图层\r\nlet defaultLayer: Layer | null = null;\r\n// 卫星图层\r\nlet satelliteLayer: Layer | null = null;\r\n// 路网图层\r\nlet roadNetLayer: Layer | null = null;\r\n// 实时交通图层\r\nlet trafficLayer: Layer | null = null;\r\n// 当前选择的图层按钮下标\r\nconst layersIndex = defineModel('layersIndex', {\r\n  default: 0,\r\n});\r\n\r\nconst mapId = 'map' + new Date().getTime();\r\n\r\nconst { isDarkMode } = useDarkModeObserver();\r\n\r\nconst mapStyle = computed(() => {\r\n  return isDarkMode.value ? \"amap://styles/dark\" : \"amap://styles/normal\";\r\n})\r\n\r\nwatch(isDarkMode, () => {\r\n  map?.setMapStyle(mapStyle.value);\r\n},{\r\n  immediate: true,\r\n})\r\n\r\ndefineExpose({\r\n  map,\r\n});\r\n\r\nwatch(\r\n  () => props.layers,\r\n  (newValue, oldValue) => {\r\n    hideLayers(getLayers(oldValue));\r\n    showLayers(getLayers(newValue));\r\n  },\r\n);\r\n\r\nwatch(layersIndex, (newValue, oldValue) => {\r\n  hideLayers(getLayers(props.layersButtons[oldValue]?.layers ?? []));\r\n  showLayers(getLayers(props.layersButtons[newValue]?.layers ?? []));\r\n});\r\n\r\nwatch(\r\n  () => props.layersButtons,\r\n  (newValue, oldValue) => {\r\n    hideLayers(getLayers(oldValue[layersIndex.value]?.layers ?? []));\r\n    showLayers(getLayers(newValue[layersIndex.value]?.layers ?? []));\r\n  },\r\n);\r\n\r\nfunction showLayers(layers: Layer[]) {\r\n  layers.forEach(layer => {\r\n    layer.show();\r\n  });\r\n}\r\n\r\nfunction hideLayers(layers: Layer[]) {\r\n  layers.forEach(layer => {\r\n    layer.hide();\r\n  });\r\n}\r\n\r\nfunction getLayers(layers: Layer[] | AMapLayer[]) {\r\n  return layers.map(layer => {\r\n    if (typeof layer === 'string') {\r\n      // 懒加载图层\r\n      const layerType = layer as AMapLayerType;\r\n      switch (layerType) {\r\n        case 'default':\r\n          if (defaultLayer === null) {\r\n            defaultLayer = AMapInstance.value?.createDefaultLayer() as Layer;\r\n            map?.addLayer(defaultLayer);\r\n          }\r\n          return defaultLayer;\r\n        case 'satellite':\r\n          if (satelliteLayer === null) {\r\n            satelliteLayer = new AMapInstance.value!.TileLayer.Satellite();\r\n            map?.addLayer(satelliteLayer);\r\n          }\r\n          return satelliteLayer;\r\n        case 'roadNet':\r\n          if (roadNetLayer === null) {\r\n            roadNetLayer = new AMapInstance.value!.TileLayer.RoadNet();\r\n            map?.addLayer(roadNetLayer);\r\n          }\r\n          return roadNetLayer;\r\n        case 'traffic':\r\n          if (trafficLayer === null) {\r\n            trafficLayer = new AMapInstance.value!.TileLayer.Traffic();\r\n            map?.addLayer(trafficLayer);\r\n          }\r\n          return trafficLayer;\r\n        default:\r\n          // eslint-disable-next-line no-case-declarations\r\n          const n: never = layerType;\r\n          console.warn(`[LivAMap]传入了不存在的图层类型layerType=${n}，将使用默认图层代替。`);\r\n          if (defaultLayer === null) {\r\n            defaultLayer = AMapInstance.value?.createDefaultLayer() as Layer;\r\n            map?.addLayer(defaultLayer);\r\n          }\r\n          return defaultLayer;\r\n      }\r\n    } else {\r\n      if (layer) {\r\n        // @ts-ignore\r\n        if (!layer.map) {\r\n          // 图层还未添加到地图上\r\n          map?.add(layer);\r\n        }\r\n      } else {\r\n        console.warn(`[LivAMap]传入了一个空的图层，请确保图层创建完成之后再传入。`);\r\n      }\r\n      return layer;\r\n    }\r\n  });\r\n}\r\n\r\nfunction getLayersButtonImage(layers: AMapLayer[]) {\r\n  if (layers.includes('satellite')) {\r\n    return satellite;\r\n  } else {\r\n    return vector;\r\n  }\r\n}\r\n\r\nonMounted(() => {\r\n  import('@amap/amap-jsapi-loader').then(module => {\r\n    module.default\r\n      .load({\r\n        key: '',\r\n        version: '2.0',\r\n        ...propsProxy.loadOptions,\r\n      })\r\n      .then((aMap: AMap.NameSpace) => {\r\n        AMapInstance.value = aMap;\r\n        map = new AMapInstance.value.Map(mapId, {\r\n          viewMode: '3D',\r\n          mapStyle: mapStyle.value,\r\n          ...propsProxy.mapOptions,\r\n          layers: initLayers(),\r\n        });\r\n\r\n        emit('loaded', map, AMapInstance.value, typeof Loca !== 'undefined' ? Loca : undefined);\r\n      });\r\n  });\r\n});\r\n\r\nfunction initLayers() {\r\n  if (props.layersControl) {\r\n    // 如果开启了layersControl，则根据当前选中的layersButtons初始化图层\r\n    return getLayers(props.layersButtons[layersIndex.value]?.layers ?? []);\r\n  } else if (props.mapOptions?.layers) {\r\n    // 如果mapOptions中传入了layers属性，则根据传入的layers初始化图层\r\n    if (typeof props.mapOptions.layers === 'function') {\r\n      return getLayers(props.mapOptions.layers(AMapInstance.value!));\r\n    } else {\r\n      return getLayers(props.mapOptions?.layers);\r\n    }\r\n  } else {\r\n    // 根据传入的layers属性初始化图层\r\n    return getLayers(props.layers);\r\n  }\r\n}\r\n\r\nonUnmounted(() => {\r\n  map?.destroy();\r\n  map = null;\r\n  defaultLayer = null;\r\n  satelliteLayer = null;\r\n  roadNetLayer = null;\r\n  trafficLayer = null;\r\n});\r\n</script>\r\n"],"names":["inject","A_MAP_KEY","getPropsPoxy","shallowRef","_useModel","useDarkModeObserver","computed","watch","satellite","vector","onMounted","onUnmounted"],"mappings":"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"}