{"version":3,"file":"data-table.vue2.js","sources":["../../../../../../packages/components/data-table/src/data-table.vue"],"sourcesContent":["<template>\r\n  <el-table\r\n    ref=\"tableRef\"\r\n    class=\"vp-raw liv-data-table\"\r\n    table-layout=\"auto\"\r\n    :tooltip-options=\"{\r\n      placement: 'right',\r\n    }\"\r\n    :data=\"data\"\r\n    v-bind=\"pick(globalProps, Object.keys(tableProps))\">\r\n    <template v-for=\"field in validFields\" :key=\"field.prop\">\r\n      <el-table-column\r\n        v-if=\"!field.fieldType || field.fieldType === 'text'\"\r\n        class=\"liv-table-column__text\"\r\n        :show-overflow-tooltip=\"{\r\n          popperClass: 'liv-table-column__tooltip',\r\n        }\"\r\n        v-bind=\"pick(field as TextTableColumnField<T>, Object.keys(tableColumnProps))\">\r\n      </el-table-column>\r\n      <el-table-column\r\n        v-else-if=\"field.fieldType === 'ciphertext'\"\r\n        v-bind=\"pick(field as TextTableColumnField<T>, Object.keys(tableColumnProps))\"\r\n        :showOverflowTooltip=\"false\">\r\n        <template #default=\"scope: DataTableScope<T>\">\r\n          <div class=\"liv-table-column__ciphertext\">\r\n            <el-tooltip\r\n              v-if=\"field.showOverflowTooltip !== false\"\r\n              popper-class=\"liv-table-column__tooltip\"\r\n              :content=\"\r\n                verifyInfoMap[scope.$index][field.prop].decrypted\r\n                  ? verifyInfoMap[scope.$index][field.prop].plaintext\r\n                  : (getFormatter(field, scope) as string)\r\n              \"\r\n              placement=\"right\">\r\n              <div class=\"liv-table-column__ciphertext--tooltip\">\r\n                {{\r\n                  verifyInfoMap[scope.$index][field.prop].decrypted\r\n                    ? verifyInfoMap[scope.$index][field.prop].plaintext\r\n                    : getFormatter(field, scope)\r\n                }}\r\n              </div>\r\n            </el-tooltip>\r\n            <div v-else>\r\n              {{\r\n                verifyInfoMap[scope.$index][field.prop].decrypted\r\n                  ? verifyInfoMap[scope.$index][field.prop].plaintext\r\n                  : getFormatter(field, scope)\r\n              }}\r\n            </div>\r\n            <el-icon\r\n              v-if=\"\r\n                verifyInfoMap[scope.$index][field.prop].decrypted\r\n                  ? verifyInfoMap[scope.$index][field.prop].plaintext\r\n                  : getFormatter(field, scope)\r\n              \">\r\n              <View\r\n                v-if=\"verifyInfoMap[scope.$index][field.prop].decrypted\"\r\n                @click=\"resetCiphertext(scope.$index, field)\" /><Hide\r\n                v-else\r\n                @click=\"verifyInfoMap[scope.$index][field.prop].visible = true\" />\r\n            </el-icon>\r\n          </div>\r\n          <Teleport to=\"body\">\r\n            <verify\r\n              v-if=\"verifyInfoMap[scope.$index][field.prop].visible\"\r\n              v-bind=\"omit(field, Object.keys(tableColumnProps))\"\r\n              :type=\"field.type\"\r\n              v-model=\"verifyInfoMap[scope.$index][field.prop].visible\"\r\n              @success=\"verifySuccess($event, scope, field)\"></verify>\r\n          </Teleport>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column\r\n        v-else-if=\"field.fieldType === 'button'\"\r\n        v-bind=\"pick(omit(field, 'type'), Object.keys(tableColumnProps))\">\r\n        <template #default=\"scope: DataTableScope<T>\">\r\n          <el-button\r\n            class=\"liv-table-column__button\"\r\n            plain\r\n            size=\"small\"\r\n            v-bind=\"omit(field, 'type', 'loading', 'onClick', ...Object.keys(tableColumnProps))\"\r\n            :type=\"\r\n              typeof field.type === 'function'\r\n                ? field.type(scope.row, scope.$index, scope.row[field.prop])\r\n                : field.type\r\n            \"\r\n            :loading=\"\r\n              buttonLoadings.find(item => item[0] === scope.row && item[1] === field.prop)\r\n                ? true\r\n                : false\r\n            \"\r\n            @click=\"buttonOnClick(field, scope)\"\r\n            >{{ field.name ?? getFormatter(field, scope) }}</el-button\r\n          >\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column\r\n        v-else-if=\"field.fieldType === 'switch'\"\r\n        v-bind=\"pick(field, Object.keys(tableColumnProps))\">\r\n        <template #default=\"scope: DataTableScope<T>\">\r\n          <el-switch\r\n            class=\"liv-table-column__switch\"\r\n            v-model=\"scope.row[field.prop]\"\r\n            size=\"small\"\r\n            v-bind=\"\r\n              omit(field, 'beforeChange', 'onChange', 'loading', ...Object.keys(tableColumnProps))\r\n            \"\r\n            :loading=\"\r\n              switchLoadings.find(item => item[0] === scope.row && item[1] === field.prop)\r\n                ? true\r\n                : false\r\n            \"\r\n            :before-change=\"() => switchBeforeChange(field, scope)\"\r\n            @change=\"\r\n              field.onChange?.($event, scope.row, scope.$index, scope.row[field.prop])\r\n            \"></el-switch>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column\r\n        v-else-if=\"field.fieldType === 'tag'\"\r\n        v-bind=\"pick(omit(field, 'type'), Object.keys(tableColumnProps))\">\r\n        <template #default=\"scope: DataTableScope<T>\">\r\n          <div class=\"liv-table-column__tags\" v-if=\"Array.isArray(scope.row[field.prop])\">\r\n            <el-tag\r\n              v-for=\"tag in scope.row[field.prop]\"\r\n              class=\"liv-table-column__tag\"\r\n              v-bind=\"omit(field, Object.keys(tableColumnProps))\"\r\n              :type=\"\r\n                typeof field.type === 'function'\r\n                  ? field.type(scope.row, scope.$index, tag)\r\n                  : field.type\r\n              \"\r\n              >{{ tag }}</el-tag\r\n            >\r\n          </div>\r\n          <el-tag\r\n            v-else\r\n            class=\"liv-table-column__tag\"\r\n            v-bind=\"omit(field, Object.keys(tableColumnProps))\"\r\n            :type=\"\r\n              typeof field.type === 'function'\r\n                ? field.type(scope.row, scope.$index, scope.row[field.prop])\r\n                : field.type\r\n            \"\r\n            >{{ getFormatter(field, scope) }}</el-tag\r\n          >\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column\r\n        v-else-if=\"field.fieldType === 'image'\"\r\n        class=\"liv-table-column__image\"\r\n        v-bind=\"pick(field, Object.keys(tableColumnProps))\">\r\n        <template #default=\"scope: DataTableScope<T>\">\r\n          <template v-if=\"scope.row[field.prop]\">\r\n            <el-popover\r\n              v-for=\"(image, index) in (handleThumbUrls ?? handleFileUrls)?.(scope.row[field.prop])\"\r\n              :key=\"image\"\r\n              placement=\"top-start\"\r\n              trigger=\"hover\"\r\n              @before-enter=\"\r\n                imagePopover = [imagePopover[2], imagePopover[3], scope.$index, index]\r\n              \">\r\n              <template #reference>\r\n                <el-image\r\n                  :preview-src-list=\"handleFileUrls?.(scope.row[field.prop])\"\r\n                  :src=\"image\"\r\n                  :initial-index=\"index\"\r\n                  fit=\"cover\"\r\n                  lazy\r\n                  preview-teleported\r\n                  class=\"liv-table-column__image--thumb\" />\r\n              </template>\r\n              <el-image\r\n                v-if=\"\r\n                  (imagePopover[0] === scope.$index && imagePopover[1] === index) ||\r\n                  (imagePopover[2] === scope.$index && imagePopover[3] === index)\r\n                \"\r\n                :preview-src-list=\"handleFileUrls?.(scope.row[field.prop])\"\r\n                :src=\"image\"\r\n                :initial-index=\"index\"\r\n                fit=\"cover\"\r\n                preview-teleported\r\n                class=\"liv-table-column__image--preview\" />\r\n            </el-popover>\r\n          </template>\r\n          <template v-else>无</template>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column\r\n        v-else-if=\"field.fieldType === 'qrcode'\"\r\n        v-bind=\"pick(field, Object.keys(tableColumnProps))\">\r\n        <template #default=\"scope: DataTableScope<T>\">\r\n          <el-popover placement=\"top-start\" trigger=\"hover\">\r\n            <template #reference>\r\n              <qr-code\r\n                class=\"liv-table-column__qrcode\"\r\n                :content=\"scope.row[field.prop]\"\r\n                :size=\"30\"\r\n                v-bind=\"omit(field, Object.keys(tableColumnProps))\"\r\n                :options=\"{ width: 400, ...(field.options ?? {}) }\" />\r\n            </template>\r\n            <qr-code\r\n              class=\"liv-table-column__qrcode--preview\"\r\n              :content=\"scope.row[field.prop]\"\r\n              :size=\"125\"\r\n              v-bind=\"omit(field, Object.keys(tableColumnProps))\"\r\n              :options=\"{ width: 400, ...(field.options ?? {}) }\" />\r\n          </el-popover>\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column\r\n        v-else-if=\"field.fieldType === 'slot'\"\r\n        class=\"liv-table-column__slot\"\r\n        v-bind=\"pick(field, Object.keys(tableColumnProps))\">\r\n        <template #default=\"scope: DataTableScope<T>\">\r\n          <slot :name=\"field.prop\" v-bind=\"scope\"></slot>\r\n        </template>\r\n      </el-table-column>\r\n    </template>\r\n    <slot></slot>\r\n    <el-table-column v-if=\"validButtons.length > 0\" fixed=\"right\" label=\"操作\">\r\n      <template #default=\"scope: DataTableScope<T>\">\r\n        <div class=\"liv-table-column__operation\">\r\n          <el-button\r\n            v-for=\"button in getShowButtons(scope.row, scope.$index).slice(\r\n              0,\r\n              propsPoxy.showButtonCount,\r\n            )\"\r\n            :key=\"button.name\"\r\n            plain\r\n            size=\"small\"\r\n            @click=\"button.onClick?.(scope.row, scope.$index)\"\r\n            v-bind=\"omit(button, ['onClick'])\"\r\n            >{{ button.name }}</el-button\r\n          >\r\n          <el-popover\r\n            placement=\"left\"\r\n            v-if=\"\r\n              getShowButtons(scope.row, scope.$index).slice(propsPoxy.showButtonCount).length > 0\r\n            \">\r\n            <template #reference>\r\n              <el-icon class=\"liv-table-column__operation--more\"><MoreFilled /></el-icon>\r\n            </template>\r\n            <div class=\"liv-table-column__operation--container\">\r\n              <el-button\r\n                plain\r\n                v-for=\"button in getShowButtons(scope.row, scope.$index).slice(\r\n                  propsPoxy.showButtonCount,\r\n                )\"\r\n                :key=\"button.name\"\r\n                size=\"small\"\r\n                @click=\"button.onClick?.(scope.row, scope.$index)\"\r\n                v-bind=\"omit(button, ['onClick'])\"\r\n                >{{ button.name }}</el-button\r\n              >\r\n            </div>\r\n          </el-popover>\r\n        </div>\r\n      </template>\r\n    </el-table-column>\r\n    <template v-if=\"!$slots.empty\" #empty>\r\n      <el-empty description=\"暂无数据\" />\r\n    </template>\r\n    <template #empty v-else>\r\n      <slot name=\"empty\"></slot>\r\n    </template>\r\n  </el-table>\r\n</template>\r\n\r\n<script lang=\"ts\" setup generic=\"T extends Record<string | number | symbol, any>\">\r\nimport {\r\n  watchEffect,\r\n  useAttrs,\r\n  ref,\r\n  toValue,\r\n  computed,\r\n  type Ref,\r\n  unref,\r\n  type VNode,\r\n  inject,\r\n} from 'vue';\r\nimport {\r\n  ElTable,\r\n  ElTableColumn,\r\n  ElButton,\r\n  ElSwitch,\r\n  ElPopover,\r\n  ElTag,\r\n  ElImage,\r\n  ElIcon,\r\n  ElEmpty,\r\n  ElTooltip,\r\n} from 'element-plus';\r\n// @ts-ignore\r\nimport tableProps from 'element-plus/es/components/table/src/table/defaults.mjs';\r\n// @ts-ignore\r\nimport tableColumnProps from 'element-plus/es/components/table/src/table-column/defaults.mjs';\r\nimport { View, Hide, MoreFilled } from '@element-plus/icons-vue';\r\nimport { omit, pick } from 'lodash-es';\r\nimport type {\r\n  ButtonTableColumnField,\r\n  CiphertextTableColumnField,\r\n  DataTableButton,\r\n  DataTableField,\r\n  DataTableFullProps,\r\n  DataTableProps,\r\n  DataTableScope,\r\n  SwitchTableColumnField,\r\n  TextTableColumnField,\r\n} from './data-table';\r\nimport Verify from '../../verify/src/verify.vue';\r\nimport QrCode from '../../qr-code/src/qr-code.vue';\r\nimport {\r\n  MakeRequired,\r\n  checkAuthoritys,\r\n  getPropsPoxy,\r\n  injectCheckAuthority,\r\n  injectHandleFileUrls,\r\n  injectHandleThumbUrls,\r\n  sortByOrder,\r\n} from '@liv-web/utils';\r\nimport { DATA_TABLE_KEY } from '@liv-web/constants';\r\nimport type { VerifyResult } from '../../verify';\r\n\r\n/**\r\n * 组件配置\r\n */\r\ndefineOptions({\r\n  name: 'LivDataTable',\r\n});\r\n\r\n/**\r\n * 注入校验权限方法\r\n */\r\nconst checkAuthority = injectCheckAuthority();\r\n\r\n/**\r\n * 注入处理文件地址方法\r\n */\r\nconst handleFileUrls = injectHandleFileUrls();\r\n\r\n/**\r\n * 注入处理缩略图地址方法\r\n */\r\nconst handleThumbUrls = injectHandleThumbUrls();\r\n\r\n/**\r\n * 注入全局属性\r\n */\r\nconst globalProps = inject(DATA_TABLE_KEY, {});\r\n\r\n/**\r\n * 组件属性\r\n */\r\nconst props = withDefaults(defineProps<DataTableProps<T>>(), {\r\n  data: () => [] as T[],\r\n  showButtonCount: () => 3,\r\n  buttons: () => [] as DataTableButton<T>[],\r\n});\r\n\r\n/**\r\n * 属性代理\r\n */\r\nconst propsPoxy = getPropsPoxy<MakeRequired<DataTableFullProps<T>, 'showButtonCount'>>(\r\n  props,\r\n  globalProps,\r\n);\r\n\r\n/**\r\n * 组件参数\r\n */\r\nconst attrs = useAttrs();\r\n\r\n/**\r\n * 有效的fields配置项\r\n */\r\nconst validFields = computed<DataTableField<T>[]>(() => {\r\n  return (toValue(props.fields) as DataTableField<T>[]).filter(field => {\r\n    return checkAuthoritys(checkAuthority, field.authority);\r\n  });\r\n});\r\n\r\n/**\r\n * 内置操作按钮\r\n */\r\nconst innerButtons = computed<DataTableButton<T>[]>(() => {\r\n  return [initInnerButton('onDetail'), initInnerButton('onEdit'), initInnerButton('onDelete')];\r\n});\r\n\r\n/**\r\n * 需要展示的操作按钮\r\n */\r\nconst validButtons = computed(() => {\r\n  return innerButtons.value\r\n    .concat(props.buttons)\r\n    .filter(button => {\r\n      return checkAuthoritys(checkAuthority, button.authority) && button.show !== false;\r\n    })\r\n    .sort((a, b) => sortByOrder(a.order, b.order));\r\n});\r\n\r\n/**\r\n * 内置按钮默认属性映射\r\n */\r\nconst innerButtonMap: {\r\n  onDetail: DataTableButton<T>;\r\n  onEdit: DataTableButton<T>;\r\n  onDelete: DataTableButton<T>;\r\n} = {\r\n  onDetail: {\r\n    name: '详情',\r\n    type: 'primary',\r\n    order: 10,\r\n  },\r\n  onEdit: {\r\n    name: '编辑',\r\n    type: 'warning',\r\n    order: 20,\r\n  },\r\n  onDelete: {\r\n    name: '删除',\r\n    type: 'danger',\r\n    order: 30,\r\n  },\r\n};\r\n\r\n/**\r\n * 初始化内置按钮\r\n * @param type 需要初始化的内置按钮类型\r\n * @returns { DataTableButton<T> } 表格右侧列操作按钮\r\n */\r\nfunction initInnerButton(type: 'onDetail' | 'onEdit' | 'onDelete'): DataTableButton<T> {\r\n  const button: DataTableButton<T> = {\r\n    ...innerButtonMap[type],\r\n  };\r\n  if (props[type]) {\r\n    // 有点击事件但没有拼接权限标识\r\n    button.onClick = props[type];\r\n  } else {\r\n    const key = Object.keys(attrs).find(key => key.startsWith(type));\r\n    const regex = /\\((.*?)\\)/;\r\n    const matches = key?.match(regex);\r\n    if (matches && matches[1]) {\r\n      // 有点击事件并且拼接了权限标识\r\n      button.onClick = attrs[key!] as DataTableButton<T>['onClick'];\r\n      button.authority = matches[1].split('|');\r\n    } else {\r\n      button.show = false;\r\n    }\r\n  }\r\n  return button;\r\n}\r\n\r\n/**\r\n * 获取需要展示的按钮\r\n * @param row 行数据\r\n * @param index 数据索引\r\n * @returns { DataTableButton<T>[] } 表格右侧列操作按钮集合\r\n */\r\nfunction getShowButtons(row: T, index: number): DataTableButton<T>[] {\r\n  return validButtons.value.filter(button => {\r\n    if (typeof button.show === 'function') {\r\n      return button.show(row, index);\r\n    } else {\r\n      return button.show !== false;\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * 获取格式化后的内容\r\n * @param field 表格字段配置\r\n * @param scope 表格插槽作用域数据\r\n * @return { VNode | string } 格式化后的字符串或虚拟节点\r\n */\r\nfunction getFormatter(field: DataTableField<T>, scope: DataTableScope<T>): VNode | string {\r\n  return field.formatter\r\n    ? field?.formatter(scope.row, scope.column, scope.row[field.prop!], scope.$index)\r\n    : scope.row[field.prop!];\r\n}\r\n\r\n/* 按钮类型 */\r\n\r\n/**\r\n * 记录按钮的loading状态\r\n */\r\nconst buttonLoadings: Ref<[T, keyof T][]> = ref([]);\r\n\r\n/**\r\n * 表单数据变更后重新初始化按钮列的加载状态\r\n */\r\nwatchEffect(() => {\r\n  buttonLoadings.value =\r\n    props.data?.reduce(\r\n      (pre, cur) => {\r\n        const scope = buttonLoadings.value.find(item => item[0].row === cur);\r\n        if (scope) {\r\n          pre.push(scope);\r\n        }\r\n        return pre;\r\n      },\r\n      [] as [T, keyof T][],\r\n    ) ?? [];\r\n});\r\n\r\n/**\r\n * 扩展el-button的onClick方法\r\n * @param field 表格字段配置\r\n * @param scope 表格插槽作用域数据\r\n */\r\nfunction buttonOnClick(field: ButtonTableColumnField<T>, scope: DataTableScope<T>) {\r\n  // TODO 待优化，后续版本onClick属性将不再支持传入ref类型\r\n  const result = unref(field.onClick)?.(scope.row, scope.$index, scope.row[field.prop]) ?? true;\r\n  if (result instanceof Promise) {\r\n    if (!buttonLoadings.value.find(item => item[0] === scope.row && item[1] === field.prop)) {\r\n      buttonLoadings.value.push([scope.row, field.prop]);\r\n    }\r\n    result.finally(() => {\r\n      const index = buttonLoadings.value.map(item => item[0]).indexOf(scope.row);\r\n      if (index !== -1) {\r\n        buttonLoadings.value.splice(index, 1);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * 验证码组件信息\r\n */\r\ninterface VerifyInfo {\r\n  /**\r\n   * 是否已解密\r\n   */\r\n  decrypted: boolean;\r\n  /**\r\n   * 验证码组件可见状态\r\n   */\r\n  visible: boolean;\r\n  /**\r\n   * 明文内容\r\n   */\r\n  plaintext: string;\r\n}\r\n\r\ntype TableVerifyInfo = {\r\n  [key: string]: VerifyInfo;\r\n}[];\r\n\r\n/**\r\n * 加密文本表格列对应的验证码组件信息\r\n */\r\nconst verifyInfoMap = ref<TableVerifyInfo>([]);\r\n\r\nwatchEffect(() => {\r\n  verifyInfoMap.value = props.data.map(_row => {\r\n    const rowVerifyInfo: { [key: string]: VerifyInfo } = {};\r\n    validFields.value\r\n      .filter(field => field.fieldType === 'ciphertext')\r\n      .forEach(field => {\r\n        rowVerifyInfo[field.prop!] = {\r\n          decrypted: false,\r\n          visible: false,\r\n          plaintext: '',\r\n        };\r\n      });\r\n    return rowVerifyInfo;\r\n  });\r\n});\r\n\r\n/**\r\n * 验证码校验成功回调\r\n * @param params 校验结果\r\n * @param scope 作用域数据\r\n * @param field 字段配置项\r\n */\r\nfunction verifySuccess(\r\n  params: VerifyResult,\r\n  scope: DataTableScope<T>,\r\n  field: CiphertextTableColumnField<T>,\r\n) {\r\n  const decryptImpl = field.decrypt?.(params, scope.row);\r\n  if (decryptImpl) {\r\n    if (decryptImpl instanceof Promise) {\r\n      decryptImpl.then(res => {\r\n        verifyInfoMap.value[scope.$index][field.prop].decrypted = true;\r\n        verifyInfoMap.value[scope.$index][field.prop].plaintext = res;\r\n      });\r\n    } else if (typeof decryptImpl === 'string') {\r\n      verifyInfoMap.value[scope.$index][field.prop].decrypted = true;\r\n      verifyInfoMap.value[scope.$index][field.prop].plaintext = decryptImpl;\r\n    } else {\r\n      console.error('[liv-web/data-table]请检查传入的解密逻辑是否正确！');\r\n    }\r\n  } else {\r\n    console.error('[liv-web/data-table]当fieldType为ciphertext时，需要传入具体的解密逻辑！');\r\n  }\r\n}\r\n\r\n//  computed(() => {\r\n//   return props.data.map(_row => {\r\n//     const rowVerifyInfo: { [key: string]: VerifyInfo } = {};\r\n//     validFields.value\r\n//       .filter(field => field.fieldType === 'ciphertext')\r\n//       .forEach(field => {\r\n//         rowVerifyInfo[field.prop!] = {\r\n//           decrypted: false,\r\n//           visible: false,\r\n//           plaintext: '',\r\n//         };\r\n//       });\r\n//     return rowVerifyInfo;\r\n//   });\r\n// });\r\n\r\n/**\r\n * 重置加密文本\r\n * @param index 需要重置加密文本的数据索引\r\n * @param field 需要重置加密文本的配置项\r\n */\r\nfunction resetCiphertext(index: number, field: CiphertextTableColumnField<T>) {\r\n  const verifyInfo = verifyInfoMap.value[index][field.prop];\r\n  if (verifyInfo) {\r\n    verifyInfo.decrypted = false;\r\n    verifyInfo.plaintext = '';\r\n  }\r\n}\r\n\r\n/** 开关类型 */\r\n\r\n/**\r\n * 记录开关列的加载状态\r\n */\r\nconst switchLoadings: Ref<[T, keyof T][]> = ref([]);\r\n\r\n/**\r\n * 表单数据变更后重新初始化开关列的加载状态\r\n */\r\nwatchEffect(() => {\r\n  switchLoadings.value =\r\n    props.data?.reduce(\r\n      (pre, cur) => {\r\n        const scope = switchLoadings.value.find(item => item[0].row === cur);\r\n        if (scope) {\r\n          pre.push(scope);\r\n        }\r\n        return pre;\r\n      },\r\n      [] as [T, keyof T][],\r\n    ) ?? [];\r\n});\r\n\r\n/**\r\n * 扩展el-switch的beforeChange方法\r\n * @param field 表格字段配置\r\n * @param scope 表格插槽作用域数据\r\n * @returns { boolean | Promise<boolean> } 返回`false`或者返回`Promise`且被`reject`则停止切换\r\n */\r\nfunction switchBeforeChange(\r\n  field: SwitchTableColumnField<T>,\r\n  scope: DataTableScope<T>,\r\n): boolean | Promise<boolean> {\r\n  const result = field.beforeChange?.(scope.row, scope.$index, scope.row[field.prop]) ?? true;\r\n  if (result instanceof Promise) {\r\n    return new Promise<boolean>(resolve => {\r\n      if (!switchLoadings.value.find(item => item[0] === scope.row && item[1] === field.prop)) {\r\n        switchLoadings.value.push([scope.row, field.prop]);\r\n      }\r\n      result.then(resolve).finally(() => {\r\n        const index = switchLoadings.value.map(item => item[0]).indexOf(scope.row);\r\n        if (index !== -1) {\r\n          switchLoadings.value.splice(index, 1);\r\n        }\r\n      });\r\n    });\r\n  } else {\r\n    return result;\r\n  }\r\n}\r\n\r\n/** 图片类型 */\r\n\r\n/**\r\n * 用于实现popover内image组件的懒加载\r\n */\r\nconst imagePopover = ref([-1, -1, -1, -1]);\r\n\r\n// TODO 待优化\r\nconst tableRef = ref();\r\n\r\ndefineExpose({ tableRef });\r\n</script>\r\n"],"names":["injectCheckAuthority","injectHandleFileUrls","injectHandleThumbUrls","inject","DATA_TABLE_KEY","getPropsPoxy","useAttrs","computed","toValue","checkAuthoritys","sortByOrder","key","ref","watchEffect","unref"],"mappings":"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}