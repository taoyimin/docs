{"version":3,"file":"index.js","sources":["../../../../../packages/utils/regex/index.ts"],"sourcesContent":["// @ts-nocheck\r\nimport IDValidator from './id_validator_es6';\r\n\r\n/**\r\n * 数字正则表达式\r\n */\r\nexport const NUMBER_REGEX = /^[0-9]+$/;\r\n\r\n/**\r\n * 密码正则表达式\r\n */\r\nexport const PASSWORD_REGEX =\r\n  /^.*(?=.{8,})(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$=%^&*()_+-.]).*$/;\r\n\r\n/**\r\n * 手机号正则表达式\r\n */\r\nexport const PHONE_REGEX = /^1[3-9]\\d{9}$/;\r\n\r\n/**\r\n * 经度正则表达式\r\n */\r\nexport const LONGITUDE_REGEX =\r\n  /^-?(?:180(?:(?:\\.0+)?)|(?:[0-9]|[1-9][0-9]|1[0-7][0-9])(?:(?:\\.[0-9]+)?))$/;\r\n\r\n/**\r\n * 纬度正则表达式\r\n */\r\nexport const LATITUDE_REGEX = /^-?(?:90(?:(?:\\.0+)?)|(?:[0-9]|[1-8][0-9])(?:(?:\\.[0-9]+)?))$/;\r\n\r\n/**\r\n * 包含中文字符正则表达式\r\n */\r\nexport const INCLUDE_ZH_REGEX = /[\\u4e00-\\u9fa5]+/;\r\n\r\n/**\r\n * email正则表达式\r\n */\r\nexport const EMAIL_REGEX = /^[a-zA-Z0-9._%-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/;\r\n\r\n/**\r\n * 匹配一个字符串是否是数字\r\n * @param string 需要匹配的字符串\r\n * @returns\r\n */\r\nexport function matchNumber(string: string) {\r\n  return NUMBER_REGEX.test(string);\r\n}\r\n\r\n/**\r\n * 匹配一个字符串是否是密码（至少8位,至多20位,至少包含1个大写字母、1个小写字母、1个数字和1个特殊字符）\r\n * @param string 需要匹配的字符串\r\n * @returns\r\n */\r\nexport function matchPassword(string: string) {\r\n  return PASSWORD_REGEX.test(string);\r\n}\r\n\r\n/**\r\n * 匹配一个字符串是否是手机号\r\n * @param string 需要匹配的字符串\r\n * @returns\r\n */\r\nexport function matchPhone(string: string) {\r\n  return PHONE_REGEX.test(string);\r\n}\r\n\r\n/**\r\n * 匹配一个字符串是否是身份证\r\n * @param string 需要匹配的字符串\r\n * @returns\r\n */\r\nexport function matchIdCard(string: string) {\r\n  return IDValidator.isValid(string);\r\n}\r\n\r\n/**\r\n * 匹配一个字符串是否是经度\r\n * @param string 需要匹配的字符串\r\n * @returns\r\n */\r\nexport function matchLongitude(string: string) {\r\n  return LONGITUDE_REGEX.test(string);\r\n}\r\n\r\n/**\r\n * 匹配一个字符串是否是纬度\r\n * @param string 需要匹配的字符串\r\n * @returns\r\n */\r\nexport function matchLatitude(string: string) {\r\n  return LATITUDE_REGEX.test(string);\r\n}\r\n\r\n/**\r\n * 匹配一个字符串是否包含中文\r\n * @param string 需要匹配的字符串\r\n * @returns\r\n */\r\nexport function matchIncludeZh(string: string) {\r\n  return INCLUDE_ZH_REGEX.test(string);\r\n}\r\n\r\n/**\r\n * 匹配一个字符串是否是邮箱\r\n * @param string 需要匹配的字符串\r\n * @returns\r\n */\r\nexport function matchEmail(string: string) {\r\n  return EMAIL_REGEX.test(string);\r\n}\r\n\r\n/**\r\n * 匹配小数参数\r\n */\r\nexport interface MatchDecimalOptions {\r\n  min?: number;\r\n  max?: number;\r\n  minDigits?: number;\r\n  maxDigits?: number;\r\n}\r\n\r\n/**\r\n * 匹配一个字符串是否是小数\r\n * @param str 需要匹配的字符串\r\n * @param options 匹配参数\r\n * @returns\r\n */\r\nexport function matchDecimal(str: string, options: MatchDecimalOptions = {}) {\r\n  const { minDigits = 0, maxDigits, min = -Infinity, max = Infinity } = options;\r\n  let regexPattern;\r\n  if (minDigits === 0) {\r\n    if (maxDigits === undefined || maxDigits < 0) {\r\n      regexPattern = `^-?\\\\d+(\\\\.\\\\d{0,})?$`;\r\n    } else {\r\n      regexPattern = `^-?\\\\d+(\\\\.\\\\d{0,${maxDigits}})?$`;\r\n    }\r\n  } else {\r\n    if (maxDigits === undefined || maxDigits < 0) {\r\n      regexPattern = `^-?\\\\d*\\\\.\\\\d{${minDigits},}`;\r\n    } else {\r\n      regexPattern = `^-?\\\\d*\\\\.\\\\d{${minDigits},${maxDigits}}$`;\r\n    }\r\n  }\r\n  const regex = new RegExp(regexPattern);\r\n  if (!regex.test(str)) {\r\n    return false;\r\n  }\r\n  const num = parseFloat(str);\r\n  return num >= min && num <= max;\r\n}\r\n"],"names":["IDValidator"],"mappings":";;;;AAMO,MAAM,YAAe,GAAA,WAAA;AAKrB,MAAM,cACX,GAAA,uEAAA;AAKK,MAAM,WAAc,GAAA,gBAAA;AAKpB,MAAM,eACX,GAAA,6EAAA;AAKK,MAAM,cAAiB,GAAA,gEAAA;AAKvB,MAAM,gBAAmB,GAAA,mBAAA;AAKzB,MAAM,WAAc,GAAA,mDAAA;AAOpB,SAAS,YAAY,MAAgB,EAAA;AAC1C,EAAO,OAAA,YAAA,CAAa,KAAK,MAAM,CAAA,CAAA;AACjC,CAAA;AAOO,SAAS,cAAc,MAAgB,EAAA;AAC5C,EAAO,OAAA,cAAA,CAAe,KAAK,MAAM,CAAA,CAAA;AACnC,CAAA;AAOO,SAAS,WAAW,MAAgB,EAAA;AACzC,EAAO,OAAA,WAAA,CAAY,KAAK,MAAM,CAAA,CAAA;AAChC,CAAA;AAOO,SAAS,YAAY,MAAgB,EAAA;AAC1C,EAAO,OAAAA,wBAAA,CAAY,QAAQ,MAAM,CAAA,CAAA;AACnC,CAAA;AAOO,SAAS,eAAe,MAAgB,EAAA;AAC7C,EAAO,OAAA,eAAA,CAAgB,KAAK,MAAM,CAAA,CAAA;AACpC,CAAA;AAOO,SAAS,cAAc,MAAgB,EAAA;AAC5C,EAAO,OAAA,cAAA,CAAe,KAAK,MAAM,CAAA,CAAA;AACnC,CAAA;AAOO,SAAS,eAAe,MAAgB,EAAA;AAC7C,EAAO,OAAA,gBAAA,CAAiB,KAAK,MAAM,CAAA,CAAA;AACrC,CAAA;AAOO,SAAS,WAAW,MAAgB,EAAA;AACzC,EAAO,OAAA,WAAA,CAAY,KAAK,MAAM,CAAA,CAAA;AAChC,CAAA;AAkBO,SAAS,YAAa,CAAA,GAAA,EAAa,OAA+B,GAAA,EAAI,EAAA;AAC3E,EAAM,MAAA,EAAE,YAAY,CAAG,EAAA,SAAA,EAAW,MAAM,CAAW,QAAA,EAAA,GAAA,GAAM,UAAa,GAAA,OAAA,CAAA;AACtE,EAAI,IAAA,YAAA,CAAA;AACJ,EAAA,IAAI,cAAc,CAAG,EAAA;AACnB,IAAI,IAAA,SAAA,KAAc,KAAa,CAAA,IAAA,SAAA,GAAY,CAAG,EAAA;AAC5C,MAAe,YAAA,GAAA,CAAA,qBAAA,CAAA,CAAA;AAAA,KACV,MAAA;AACL,MAAA,YAAA,GAAe,oBAAoB,SAAS,CAAA,IAAA,CAAA,CAAA;AAAA,KAC9C;AAAA,GACK,MAAA;AACL,IAAI,IAAA,SAAA,KAAc,KAAa,CAAA,IAAA,SAAA,GAAY,CAAG,EAAA;AAC5C,MAAA,YAAA,GAAe,iBAAiB,SAAS,CAAA,EAAA,CAAA,CAAA;AAAA,KACpC,MAAA;AACL,MAAe,YAAA,GAAA,CAAA,cAAA,EAAiB,SAAS,CAAA,CAAA,EAAI,SAAS,CAAA,EAAA,CAAA,CAAA;AAAA,KACxD;AAAA,GACF;AACA,EAAM,MAAA,KAAA,GAAQ,IAAI,MAAA,CAAO,YAAY,CAAA,CAAA;AACrC,EAAA,IAAI,CAAC,KAAA,CAAM,IAAK,CAAA,GAAG,CAAG,EAAA;AACpB,IAAO,OAAA,KAAA,CAAA;AAAA,GACT;AACA,EAAM,MAAA,GAAA,GAAM,WAAW,GAAG,CAAA,CAAA;AAC1B,EAAO,OAAA,GAAA,IAAO,OAAO,GAAO,IAAA,GAAA,CAAA;AAC9B;;;;;;;;;;;;;;;;;;;"}