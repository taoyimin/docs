{"version":3,"file":"grid.js","sources":["../../../../../packages/utils/inject/grid.ts"],"sourcesContent":["import {\r\n  LOAD_GRID_BY_CODE_KEY,\r\n  LOAD_GRID_BY_ID_KEY,\r\n  LOAD_GRID_CHILDREN_BY_CODE_KEY,\r\n  LOAD_GRID_TREE_BY_CODE_KEY,\r\n  LOAD_ROOT_GRID_KEY,\r\n  LOAD_USER_GRID_KEY,\r\n} from '@liv-web/constants';\r\nimport { inject } from 'vue';\r\n\r\n/**\r\n * 加载用户所属网格方法\r\n */\r\nexport type LoadUserGridFunction<T = any> = () => Promise<T>;\r\n\r\n/**\r\n * 加载根网格方法\r\n */\r\nexport type LoadRootGridFunction<T = any> = () => Promise<T>;\r\n\r\n/**\r\n * 通过网格编码查询网格信息方法\r\n */\r\nexport type LoadGridByCodeFunction<T = any> = (gridCode: string | number) => Promise<T>;\r\n\r\n/**\r\n * 通过网格ID查询网格信息方法\r\n */\r\nexport type LoadGridByIdFunction<T = any> = (gridId: string | number) => Promise<T>;\r\n\r\n/**\r\n * 通过网格编码查询子级网格信息方法\r\n */\r\nexport type LoadGridChildrenByCodeFunction<T = any> = (gridCode: string | number) => Promise<T>;\r\n\r\n/**\r\n * 查询从起始网格编码到目标网格编码对应的网格树方法\r\n */\r\nexport type LoadGridTreeByCodeFunction<T = any> = (\r\n  /**\r\n   * 起始网格编码\r\n   */\r\n  rootCode: string | number,\r\n  /**\r\n   * 目标网格编码\r\n   */\r\n  targetCode: string | number,\r\n) => Promise<T>;\r\n\r\n/**\r\n * 注入加载用户所属网格方法\r\n */\r\nexport function injectLoadUserGrid<T>() {\r\n  const loadUserGrid = inject(LOAD_USER_GRID_KEY, undefined);\r\n  if (loadUserGrid) {\r\n    return loadUserGrid as LoadUserGridFunction<T>;\r\n  } else {\r\n    return () => Promise.reject(new Error('[liv-web/utils]请检查是否已注入加载用户所属网格方法。'));\r\n  }\r\n}\r\n\r\n/**\r\n * 注入加载根网格方法\r\n */\r\nexport function injectLoadRootGrid<T>() {\r\n  const loadRootGrid = inject(LOAD_ROOT_GRID_KEY, undefined);\r\n  if (loadRootGrid) {\r\n    return loadRootGrid as LoadRootGridFunction<T>;\r\n  } else {\r\n    return () => Promise.reject(new Error('[liv-web/utils]请检查是否已注入加载根网格方法。'));\r\n  }\r\n}\r\n\r\n/**\r\n * 注入通过网格编码查询网格方法\r\n */\r\nexport function injectLoadGridByCode<T>() {\r\n  const loadGridByCode = inject(LOAD_GRID_BY_CODE_KEY, undefined);\r\n  if (loadGridByCode) {\r\n    return loadGridByCode as LoadGridByCodeFunction<T>;\r\n  } else {\r\n    return () =>\r\n      Promise.reject(new Error('[liv-web/utils]请检查是否已注入通过网格编码查询网格方法。'));\r\n  }\r\n}\r\n\r\n/**\r\n * 注入通过网格ID查询网格方法\r\n */\r\nexport function injectLoadGridById<T>() {\r\n  const loadGridById = inject(LOAD_GRID_BY_ID_KEY, undefined);\r\n  if (loadGridById) {\r\n    return loadGridById as LoadGridByIdFunction<T>;\r\n  } else {\r\n    return () =>\r\n      Promise.reject(new Error('[liv-web/utils]请检查是否已注入通过网格ID查询网格方法。'));\r\n  }\r\n}\r\n\r\n/**\r\n * 注入通过网格编码查询子级网格方法\r\n */\r\nexport function injectLoadGridChildrenByCode<T>() {\r\n  const loadGridChildrenByCode = inject(LOAD_GRID_CHILDREN_BY_CODE_KEY, undefined);\r\n  if (loadGridChildrenByCode) {\r\n    return loadGridChildrenByCode as LoadGridChildrenByCodeFunction<T>;\r\n  } else {\r\n    return () =>\r\n      Promise.reject(new Error('[liv-web/utils]请检查是否已注入通过网格编码查询子级网格方法。'));\r\n  }\r\n}\r\n\r\n/**\r\n * 注入查询从起始网格编码到目标网格编码对应的网格树方法\r\n */\r\nexport function injectLoadGridTreeByCode<T>() {\r\n  const loadGridTreeByCode = inject(LOAD_GRID_TREE_BY_CODE_KEY, undefined);\r\n  if (loadGridTreeByCode) {\r\n    return loadGridTreeByCode as LoadGridTreeByCodeFunction<T>;\r\n  } else {\r\n    return () =>\r\n      Promise.reject(\r\n        new Error(\r\n          '[liv-web/utils]请检查是否已注入查询从起始网格编码到目标网格编码对应的网格树方法。',\r\n        ),\r\n      );\r\n  }\r\n}\r\n"],"names":["inject","LOAD_USER_GRID_KEY","LOAD_ROOT_GRID_KEY","LOAD_GRID_BY_CODE_KEY","LOAD_GRID_BY_ID_KEY","LOAD_GRID_CHILDREN_BY_CODE_KEY","LOAD_GRID_TREE_BY_CODE_KEY"],"mappings":";;;;;;AAoDO,SAAS,kBAAwB,GAAA;AACtC,EAAM,MAAA,YAAA,GAAeA,UAAO,CAAAC,uBAAA,EAAoB,KAAS,CAAA,CAAA,CAAA;AACzD,EAAA,IAAI,YAAc,EAAA;AAChB,IAAO,OAAA,YAAA,CAAA;AAAA,GACF,MAAA;AACL,IAAA,OAAO,MAAM,OAAQ,CAAA,MAAA,CAAO,IAAI,KAAA,CAAM,mIAAoC,CAAC,CAAA,CAAA;AAAA,GAC7E;AACF,CAAA;AAKO,SAAS,kBAAwB,GAAA;AACtC,EAAM,MAAA,YAAA,GAAeD,UAAO,CAAAE,uBAAA,EAAoB,KAAS,CAAA,CAAA,CAAA;AACzD,EAAA,IAAI,YAAc,EAAA;AAChB,IAAO,OAAA,YAAA,CAAA;AAAA,GACF,MAAA;AACL,IAAA,OAAO,MAAM,OAAQ,CAAA,MAAA,CAAO,IAAI,KAAA,CAAM,iHAAiC,CAAC,CAAA,CAAA;AAAA,GAC1E;AACF,CAAA;AAKO,SAAS,oBAA0B,GAAA;AACxC,EAAM,MAAA,cAAA,GAAiBF,UAAO,CAAAG,0BAAA,EAAuB,KAAS,CAAA,CAAA,CAAA;AAC9D,EAAA,IAAI,cAAgB,EAAA;AAClB,IAAO,OAAA,cAAA,CAAA;AAAA,GACF,MAAA;AACL,IAAA,OAAO,MACL,OAAQ,CAAA,MAAA,CAAO,IAAI,KAAA,CAAM,+IAAsC,CAAC,CAAA,CAAA;AAAA,GACpE;AACF,CAAA;AAKO,SAAS,kBAAwB,GAAA;AACtC,EAAM,MAAA,YAAA,GAAeH,UAAO,CAAAI,wBAAA,EAAqB,KAAS,CAAA,CAAA,CAAA;AAC1D,EAAA,IAAI,YAAc,EAAA;AAChB,IAAO,OAAA,YAAA,CAAA;AAAA,GACF,MAAA;AACL,IAAA,OAAO,MACL,OAAQ,CAAA,MAAA,CAAO,IAAI,KAAA,CAAM,qIAAsC,CAAC,CAAA,CAAA;AAAA,GACpE;AACF,CAAA;AAKO,SAAS,4BAAkC,GAAA;AAChD,EAAM,MAAA,sBAAA,GAAyBJ,UAAO,CAAAK,mCAAA,EAAgC,KAAS,CAAA,CAAA,CAAA;AAC/E,EAAA,IAAI,sBAAwB,EAAA;AAC1B,IAAO,OAAA,sBAAA,CAAA;AAAA,GACF,MAAA;AACL,IAAA,OAAO,MACL,OAAQ,CAAA,MAAA,CAAO,IAAI,KAAA,CAAM,2JAAwC,CAAC,CAAA,CAAA;AAAA,GACtE;AACF,CAAA;AAKO,SAAS,wBAA8B,GAAA;AAC5C,EAAM,MAAA,kBAAA,GAAqBL,UAAO,CAAAM,+BAAA,EAA4B,KAAS,CAAA,CAAA,CAAA;AACvE,EAAA,IAAI,kBAAoB,EAAA;AACtB,IAAO,OAAA,kBAAA,CAAA;AAAA,GACF,MAAA;AACL,IAAA,OAAO,MACL,OAAQ,CAAA,MAAA;AAAA,MACN,IAAI,KAAA;AAAA,QACF,uNAAA;AAAA,OACF;AAAA,KACF,CAAA;AAAA,GACJ;AACF;;;;;;;;;"}