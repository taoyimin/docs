import { nextTick } from 'vue';
import Node from 'element-plus/es/components/tree/src/model/node';
import type { TreeKey } from 'element-plus/es/components/tree/src/tree.type';
import type { GridTreeProps } from './grid-tree';
declare const _default: <T extends Record<string | number | symbol, any>>(__VLS_props: NonNullable<Awaited<typeof __VLS_setup>>["props"], __VLS_ctx?: __VLS_PrettifyLocal<Pick<NonNullable<Awaited<typeof __VLS_setup>>, "attrs" | "emit" | "slots">>, __VLS_expose?: NonNullable<Awaited<typeof __VLS_setup>>["expose"], __VLS_setup?: Promise<{
    props: __VLS_PrettifyLocal<Pick<Partial<{}> & Omit<{
        readonly "onUpdate:modelValue"?: ((modelValue: string | number) => any) | undefined;
        readonly "onUpdate:gridId"?: ((gridId: string | number) => any) | undefined;
        readonly "onUpdate:gridName"?: ((gridName: string) => any) | undefined;
        readonly "onUpdate:grid"?: ((grid: T) => any) | undefined;
    } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<{}> & Readonly<{
        "onUpdate:modelValue"?: ((modelValue: string | number) => any) | undefined;
        "onUpdate:gridId"?: ((gridId: string | number) => any) | undefined;
        "onUpdate:gridName"?: ((gridName: string) => any) | undefined;
        "onUpdate:grid"?: ((grid: T) => any) | undefined;
    }>, never>, "onUpdate:modelValue" | "onUpdate:gridId" | "onUpdate:gridName" | "onUpdate:grid"> & ({
        modelValue?: string | number;
        gridId?: string | number;
        gridName?: string;
        grid?: T;
    } & GridTreeProps<T>)> & import("vue").PublicProps;
    expose(exposed: import("vue").ShallowUnwrapRef<{
        $?: import("vue").ComponentInternalInstance | undefined;
        $data?: {} | undefined;
        $props?: (Partial<{
            data: unknown[];
            props: import("element-plus").TreeOptionProps;
            checkStrictly: boolean;
            lazy: boolean;
            accordion: boolean;
            draggable: boolean;
            defaultExpandAll: boolean;
            indent: number;
            renderAfterExpand: boolean;
            showCheckbox: boolean;
            expandOnClickNode: boolean;
            checkOnClickNode: boolean;
            checkDescendants: boolean;
            autoExpandParent: boolean;
            highlightCurrent: boolean;
        }> & Omit<{
            readonly data: unknown[];
            readonly props: import("element-plus").TreeOptionProps;
            readonly lazy: boolean;
            readonly highlightCurrent: boolean;
            readonly showCheckbox: boolean;
            readonly checkStrictly: boolean;
            readonly indent: number;
            readonly expandOnClickNode: boolean;
            readonly checkOnClickNode: boolean;
            readonly accordion: boolean;
            readonly draggable: boolean;
            readonly defaultExpandAll: boolean;
            readonly renderAfterExpand: boolean;
            readonly checkDescendants: boolean;
            readonly autoExpandParent: boolean;
            readonly icon?: string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions, {}, any> | undefined;
            readonly emptyText?: string | undefined;
            readonly defaultCheckedKeys?: TreeKey[] | undefined;
            readonly defaultExpandedKeys?: TreeKey[] | undefined;
            readonly currentNodeKey?: string | number | undefined;
            readonly load?: import("element-plus").LoadFunction | undefined;
            readonly nodeKey?: string | undefined;
            readonly renderContent?: Function | undefined;
            readonly allowDrag?: Function | undefined;
            readonly allowDrop?: Function | undefined;
            readonly filterNodeMethod?: import("element-plus").FilterNodeMethodFunction | undefined;
            "onCurrent-change"?: ((...args: any[]) => any) | undefined;
            "onNode-expand"?: ((...args: any[]) => any) | undefined;
            onCheck?: ((...args: any[]) => any) | undefined;
            "onCheck-change"?: ((...args: any[]) => any) | undefined;
            "onNode-click"?: ((...args: any[]) => any) | undefined;
            "onNode-contextmenu"?: ((...args: any[]) => any) | undefined;
            "onNode-collapse"?: ((...args: any[]) => any) | undefined;
            "onNode-drag-start"?: ((...args: any[]) => any) | undefined;
            "onNode-drag-end"?: ((...args: any[]) => any) | undefined;
            "onNode-drop"?: ((...args: any[]) => any) | undefined;
            "onNode-drag-leave"?: ((...args: any[]) => any) | undefined;
            "onNode-drag-enter"?: ((...args: any[]) => any) | undefined;
            "onNode-drag-over"?: ((...args: any[]) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & Readonly<import("vue").ExtractPropTypes<{
            data: {
                type: ArrayConstructor;
                default: () => never[];
            };
            emptyText: {
                type: StringConstructor;
            };
            renderAfterExpand: {
                type: BooleanConstructor;
                default: boolean;
            };
            nodeKey: StringConstructor;
            checkStrictly: BooleanConstructor;
            defaultExpandAll: BooleanConstructor;
            expandOnClickNode: {
                type: BooleanConstructor;
                default: boolean;
            };
            checkOnClickNode: BooleanConstructor;
            checkDescendants: {
                type: BooleanConstructor;
                default: boolean;
            };
            autoExpandParent: {
                type: BooleanConstructor;
                default: boolean;
            };
            defaultCheckedKeys: import("vue").PropType<import("element-plus").TreeComponentProps["defaultCheckedKeys"]>;
            defaultExpandedKeys: import("vue").PropType<import("element-plus").TreeComponentProps["defaultExpandedKeys"]>;
            currentNodeKey: import("vue").PropType<string | number>;
            renderContent: FunctionConstructor;
            showCheckbox: {
                type: BooleanConstructor;
                default: boolean;
            };
            draggable: {
                type: BooleanConstructor;
                default: boolean;
            };
            allowDrag: FunctionConstructor;
            allowDrop: FunctionConstructor;
            props: {
                type: import("vue").PropType<import("element-plus").TreeComponentProps["props"]>;
                default: () => {
                    children: string;
                    label: string;
                    disabled: string;
                };
            };
            lazy: {
                type: BooleanConstructor;
                default: boolean;
            };
            highlightCurrent: BooleanConstructor;
            load: import("vue").PropType<import("element-plus").TreeComponentProps["load"]>;
            filterNodeMethod: import("vue").PropType<import("element-plus").TreeComponentProps["filterNodeMethod"]>;
            accordion: BooleanConstructor;
            indent: {
                type: NumberConstructor;
                default: number;
            };
            icon: {
                type: import("vue").PropType<string | import("vue").Component>;
            };
        }>> & {
            "onCurrent-change"?: ((...args: any[]) => any) | undefined;
            "onNode-expand"?: ((...args: any[]) => any) | undefined;
            onCheck?: ((...args: any[]) => any) | undefined;
            "onCheck-change"?: ((...args: any[]) => any) | undefined;
            "onNode-click"?: ((...args: any[]) => any) | undefined;
            "onNode-contextmenu"?: ((...args: any[]) => any) | undefined;
            "onNode-collapse"?: ((...args: any[]) => any) | undefined;
            "onNode-drag-start"?: ((...args: any[]) => any) | undefined;
            "onNode-drag-end"?: ((...args: any[]) => any) | undefined;
            "onNode-drop"?: ((...args: any[]) => any) | undefined;
            "onNode-drag-leave"?: ((...args: any[]) => any) | undefined;
            "onNode-drag-enter"?: ((...args: any[]) => any) | undefined;
            "onNode-drag-over"?: ((...args: any[]) => any) | undefined;
        }, "data" | "props" | "lazy" | "highlightCurrent" | "showCheckbox" | "checkStrictly" | "indent" | "expandOnClickNode" | "checkOnClickNode" | "accordion" | "draggable" | "defaultExpandAll" | "renderAfterExpand" | "checkDescendants" | "autoExpandParent">) | undefined;
        $attrs?: {
            [x: string]: unknown;
        } | undefined;
        $refs?: {
            [x: string]: unknown;
        } | undefined;
        $slots?: Readonly<{
            [name: string]: import("vue").Slot<any> | undefined;
        }> | undefined;
        $root?: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}, {}, {}, string, import("vue").ComponentProvideOptions>, {}, {}, "", {}, any> | null | undefined;
        $parent?: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string, {}, {}, {}, string, import("vue").ComponentProvideOptions>, {}, {}, "", {}, any> | null | undefined;
        $host?: Element | null | undefined;
        $emit?: ((event: "check" | "current-change" | "node-expand" | "check-change" | "node-click" | "node-contextmenu" | "node-collapse" | "node-drag-start" | "node-drag-end" | "node-drop" | "node-drag-leave" | "node-drag-enter" | "node-drag-over", ...args: any[]) => void) | undefined;
        $el?: any;
        $options?: (import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            data: {
                type: ArrayConstructor;
                default: () => never[];
            };
            emptyText: {
                type: StringConstructor;
            };
            renderAfterExpand: {
                type: BooleanConstructor;
                default: boolean;
            };
            nodeKey: StringConstructor;
            checkStrictly: BooleanConstructor;
            defaultExpandAll: BooleanConstructor;
            expandOnClickNode: {
                type: BooleanConstructor;
                default: boolean;
            };
            checkOnClickNode: BooleanConstructor;
            checkDescendants: {
                type: BooleanConstructor;
                default: boolean;
            };
            autoExpandParent: {
                type: BooleanConstructor;
                default: boolean;
            };
            defaultCheckedKeys: import("vue").PropType<import("element-plus").TreeComponentProps["defaultCheckedKeys"]>;
            defaultExpandedKeys: import("vue").PropType<import("element-plus").TreeComponentProps["defaultExpandedKeys"]>;
            currentNodeKey: import("vue").PropType<string | number>;
            renderContent: FunctionConstructor;
            showCheckbox: {
                type: BooleanConstructor;
                default: boolean;
            };
            draggable: {
                type: BooleanConstructor;
                default: boolean;
            };
            allowDrag: FunctionConstructor;
            allowDrop: FunctionConstructor;
            props: {
                type: import("vue").PropType<import("element-plus").TreeComponentProps["props"]>;
                default: () => {
                    children: string;
                    label: string;
                    disabled: string;
                };
            };
            lazy: {
                type: BooleanConstructor;
                default: boolean;
            };
            highlightCurrent: BooleanConstructor;
            load: import("vue").PropType<import("element-plus").TreeComponentProps["load"]>;
            filterNodeMethod: import("vue").PropType<import("element-plus").TreeComponentProps["filterNodeMethod"]>;
            accordion: BooleanConstructor;
            indent: {
                type: NumberConstructor;
                default: number;
            };
            icon: {
                type: import("vue").PropType<string | import("vue").Component>;
            };
        }>> & {
            "onCurrent-change"?: ((...args: any[]) => any) | undefined;
            "onNode-expand"?: ((...args: any[]) => any) | undefined;
            onCheck?: ((...args: any[]) => any) | undefined;
            "onCheck-change"?: ((...args: any[]) => any) | undefined;
            "onNode-click"?: ((...args: any[]) => any) | undefined;
            "onNode-contextmenu"?: ((...args: any[]) => any) | undefined;
            "onNode-collapse"?: ((...args: any[]) => any) | undefined;
            "onNode-drag-start"?: ((...args: any[]) => any) | undefined;
            "onNode-drag-end"?: ((...args: any[]) => any) | undefined;
            "onNode-drop"?: ((...args: any[]) => any) | undefined;
            "onNode-drag-leave"?: ((...args: any[]) => any) | undefined;
            "onNode-drag-enter"?: ((...args: any[]) => any) | undefined;
            "onNode-drag-over"?: ((...args: any[]) => any) | undefined;
        }, {
            ns: {
                namespace: import("vue").ComputedRef<string>;
                b: (blockSuffix?: string) => string;
                e: (element?: string) => string;
                m: (modifier?: string) => string;
                be: (blockSuffix?: string, element?: string) => string;
                em: (element?: string, modifier?: string) => string;
                bm: (blockSuffix?: string, modifier?: string) => string;
                bem: (blockSuffix?: string, element?: string, modifier?: string) => string;
                is: {
                    (name: string, state: boolean | undefined): string;
                    (name: string): string;
                };
                cssVar: (object: Record<string, string>) => Record<string, string>;
                cssVarName: (name: string) => string;
                cssVarBlock: (object: Record<string, string>) => Record<string, string>;
                cssVarBlockName: (name: string) => string;
            };
            store: import("vue").Ref<{
                currentNode: {
                    id: number;
                    text: string;
                    checked: boolean;
                    indeterminate: boolean;
                    data: import("element-plus").TreeNodeData;
                    expanded: boolean;
                    parent: any;
                    visible: boolean;
                    isCurrent: boolean;
                    store: any;
                    isLeafByUser: boolean;
                    isLeaf: boolean;
                    canFocus: boolean;
                    level: number;
                    loaded: boolean;
                    childNodes: any[];
                    loading: boolean;
                    initialize: () => void;
                    setData: (data: import("element-plus").TreeNodeData) => void;
                    readonly label: string;
                    readonly key: TreeKey;
                    readonly disabled: boolean;
                    readonly nextSibling: any | null;
                    readonly previousSibling: any | null;
                    contains: (target: Node, deep?: boolean) => boolean;
                    remove: () => void;
                    insertChild: (child?: import("element-plus").FakeNode | Node, index?: number, batch?: boolean) => void;
                    insertBefore: (child: import("element-plus").FakeNode | Node, ref: Node) => void;
                    insertAfter: (child: import("element-plus").FakeNode | Node, ref: Node) => void;
                    removeChild: (child: Node) => void;
                    removeChildByData: (data: import("element-plus").TreeNodeData) => void;
                    expand: (callback?: () => void, expandParent?: boolean) => void;
                    doCreateChildren: (array: import("element-plus").TreeNodeData[], defaultProps?: import("element-plus").TreeNodeLoadedDefaultProps) => void;
                    collapse: () => void;
                    shouldLoadData: () => boolean;
                    updateLeafState: () => void;
                    setChecked: (value?: boolean | string, deep?: boolean, recursion?: boolean, passValue?: boolean) => void;
                    getChildren: (forceInit?: boolean) => import("element-plus").TreeNodeData | import("element-plus").TreeNodeData[];
                    updateChildren: () => void;
                    loadData: (callback: (node: Node) => void, defaultProps?: import("element-plus").TreeNodeLoadedDefaultProps) => void;
                    eachNode: (callback: (node: Node) => void) => void;
                    reInitChecked: () => void;
                };
                currentNodeKey: TreeKey;
                nodesMap: import("element-plus").TreeStoreNodesMap;
                root: {
                    id: number;
                    text: string;
                    checked: boolean;
                    indeterminate: boolean;
                    data: import("element-plus").TreeNodeData;
                    expanded: boolean;
                    parent: any;
                    visible: boolean;
                    isCurrent: boolean;
                    store: any;
                    isLeafByUser: boolean;
                    isLeaf: boolean;
                    canFocus: boolean;
                    level: number;
                    loaded: boolean;
                    childNodes: any[];
                    loading: boolean;
                    initialize: () => void;
                    setData: (data: import("element-plus").TreeNodeData) => void;
                    readonly label: string;
                    readonly key: TreeKey;
                    readonly disabled: boolean;
                    readonly nextSibling: any | null;
                    readonly previousSibling: any | null;
                    contains: (target: Node, deep?: boolean) => boolean;
                    remove: () => void;
                    insertChild: (child?: import("element-plus").FakeNode | Node, index?: number, batch?: boolean) => void;
                    insertBefore: (child: import("element-plus").FakeNode | Node, ref: Node) => void;
                    insertAfter: (child: import("element-plus").FakeNode | Node, ref: Node) => void;
                    removeChild: (child: Node) => void;
                    removeChildByData: (data: import("element-plus").TreeNodeData) => void;
                    expand: (callback?: () => void, expandParent?: boolean) => void;
                    doCreateChildren: (array: import("element-plus").TreeNodeData[], defaultProps?: import("element-plus").TreeNodeLoadedDefaultProps) => void;
                    collapse: () => void;
                    shouldLoadData: () => boolean;
                    updateLeafState: () => void;
                    setChecked: (value?: boolean | string, deep?: boolean, recursion?: boolean, passValue?: boolean) => void;
                    getChildren: (forceInit?: boolean) => import("element-plus").TreeNodeData | import("element-plus").TreeNodeData[];
                    updateChildren: () => void;
                    loadData: (callback: (node: Node) => void, defaultProps?: import("element-plus").TreeNodeLoadedDefaultProps) => void;
                    eachNode: (callback: (node: Node) => void) => void;
                    reInitChecked: () => void;
                };
                data: import("element-plus").TreeNodeData[];
                lazy: boolean;
                load: import("element-plus").LoadFunction;
                filterNodeMethod: import("element-plus").FilterNodeMethodFunction;
                key: TreeKey;
                defaultCheckedKeys: TreeKey[];
                checkStrictly: boolean;
                defaultExpandedKeys: TreeKey[];
                autoExpandParent: boolean;
                defaultExpandAll: boolean;
                checkDescendants: boolean;
                props: {
                    children?: string | undefined;
                    label?: (string | ((data: import("element-plus").TreeNodeData, node: Node) => string)) | undefined;
                    disabled?: (string | ((data: import("element-plus").TreeNodeData, node: Node) => boolean)) | undefined;
                    isLeaf?: (string | ((data: import("element-plus").TreeNodeData, node: Node) => boolean)) | undefined;
                    class?: ((data: import("element-plus").TreeNodeData, node: Node) => string | {
                        [key: string]: boolean;
                    }) | undefined;
                };
                initialize: () => void;
                filter: (value: import("element-plus").FilterValue) => void;
                setData: (newVal: import("element-plus").TreeData) => void;
                getNode: (data: TreeKey | import("element-plus").TreeNodeData | Node) => Node;
                insertBefore: (data: import("element-plus").TreeNodeData, refData: TreeKey | import("element-plus").TreeNodeData | Node) => void;
                insertAfter: (data: import("element-plus").TreeNodeData, refData: TreeKey | import("element-plus").TreeNodeData | Node) => void;
                remove: (data: import("element-plus").TreeNodeData | Node) => void;
                append: (data: import("element-plus").TreeNodeData, parentData: import("element-plus").TreeNodeData | TreeKey | Node) => void;
                _initDefaultCheckedNodes: () => void;
                _initDefaultCheckedNode: (node: Node) => void;
                setDefaultCheckedKey: (newVal: TreeKey[]) => void;
                registerNode: (node: Node) => void;
                deregisterNode: (node: Node) => void;
                getCheckedNodes: (leafOnly?: boolean, includeHalfChecked?: boolean) => import("element-plus").TreeNodeData[];
                getCheckedKeys: (leafOnly?: boolean) => TreeKey[];
                getHalfCheckedNodes: () => import("element-plus").TreeNodeData[];
                getHalfCheckedKeys: () => TreeKey[];
                _getAllNodes: () => Node[];
                updateChildren: (key: TreeKey, data: import("element-plus").TreeData) => void;
                _setCheckedKeys: (key: TreeKey, leafOnly: boolean | undefined, checkedKeys: {
                    [key: string]: boolean;
                }) => void;
                setCheckedNodes: (array: Node[], leafOnly?: boolean) => void;
                setCheckedKeys: (keys: TreeKey[], leafOnly?: boolean) => void;
                setDefaultExpandedKeys: (keys: TreeKey[]) => void;
                setChecked: (data: TreeKey | import("element-plus").TreeNodeData, checked: boolean, deep: boolean) => void;
                getCurrentNode: () => Node;
                setCurrentNode: (currentNode: Node) => void;
                setUserCurrentNode: (node: Node, shouldAutoExpandParent?: boolean) => void;
                setCurrentNodeKey: (key?: TreeKey, shouldAutoExpandParent?: boolean) => void;
            }>;
            root: import("vue").Ref<{
                id: number;
                text: string;
                checked: boolean;
                indeterminate: boolean;
                data: import("element-plus").TreeNodeData;
                expanded: boolean;
                parent: any;
                visible: boolean;
                isCurrent: boolean;
                store: any;
                isLeafByUser: boolean;
                isLeaf: boolean;
                canFocus: boolean;
                level: number;
                loaded: boolean;
                childNodes: any[];
                loading: boolean;
                initialize: () => void;
                setData: (data: import("element-plus").TreeNodeData) => void;
                readonly label: string;
                readonly key: TreeKey;
                readonly disabled: boolean;
                readonly nextSibling: any | null;
                readonly previousSibling: any | null;
                contains: (target: Node, deep?: boolean) => boolean;
                remove: () => void;
                insertChild: (child?: import("element-plus").FakeNode | Node, index
                /**
                 * 对外暴露的属性及方法
                 */
                ? /**
                 * 对外暴露的属性及方法
                 */: number, batch?: boolean) => void;
                insertBefore: (child: import("element-plus").FakeNode | Node, ref: Node) => void;
                insertAfter: (child: import("element-plus").FakeNode | Node, ref: Node) => void;
                removeChild: (child: Node) => void;
                removeChildByData: (data: import("element-plus").TreeNodeData) => void;
                expand: (callback?: () => void, expandParent?: boolean) => void;
                doCreateChildren: (array: import("element-plus").TreeNodeData[], defaultProps?: import("element-plus").TreeNodeLoadedDefaultProps) => void;
                collapse: () => void;
                shouldLoadData: () => boolean;
                updateLeafState: () => void;
                setChecked: (value?: boolean | string, deep?: boolean, recursion?: boolean, passValue?: boolean) => void;
                getChildren: (forceInit?: boolean) => import("element-plus").TreeNodeData | import("element-plus").TreeNodeData[];
                updateChildren: () => void;
                loadData: (callback: (node: Node) => void, defaultProps?: import("element-plus").TreeNodeLoadedDefaultProps) => void;
                eachNode: (callback: (node: Node) => void) => void;
                reInitChecked: () => void;
            }>;
            currentNode: import("vue").Ref<{
                id: number;
                text: string;
                checked: boolean;
                indeterminate: boolean;
                data: import("element-plus").TreeNodeData;
                expanded: boolean;
                parent: any;
                visible: boolean;
                isCurrent: boolean;
                store: any;
                isLeafByUser: boolean;
                isLeaf: boolean;
                canFocus: boolean;
                level: number;
                loaded: boolean;
                childNodes: any[];
                loading: boolean;
                initialize: () => void;
                setData: (data: import("element-plus").TreeNodeData) => void;
                readonly label: string;
                readonly key: TreeKey;
                readonly disabled: boolean;
                readonly nextSibling: any | null;
                readonly previousSibling: any | null;
                contains: (target: Node, deep?: boolean) => boolean;
                remove: () => void;
                insertChild: (child?: import("element-plus").FakeNode | Node, index?: number, batch?: boolean) => void;
                insertBefore: (child: import("element-plus").FakeNode | Node, ref: Node) => void;
                insertAfter: (child: import("element-plus").FakeNode | Node, ref: Node) => void;
                removeChild: (child: Node) => void;
                removeChildByData: (data: import("element-plus").TreeNodeData) => void;
                expand: (callback?: () => void, expandParent?: boolean) => void;
                doCreateChildren: (array: import("element-plus").TreeNodeData[], defaultProps?: import("element-plus").TreeNodeLoadedDefaultProps) => void;
                collapse: () => void;
                shouldLoadData: () => boolean;
                updateLeafState: () => void;
                setChecked: (value?: boolean | string, deep?: boolean, recursion?: boolean, passValue?: boolean) => void;
                getChildren: (forceInit?: boolean) => import("element-plus").TreeNodeData | import("element-plus").TreeNodeData[];
                updateChildren: () => void;
                loadData: (callback: (node: Node) => void, defaultProps?: import("element-plus").TreeNodeLoadedDefaultProps) => void;
                eachNode: (callback: (node: Node) => void) => void;
                reInitChecked: () => void;
            }>;
            dragState: import("vue").Ref<{
                showDropIndicator: boolean;
                draggingNode: null;
                dropNode: null;
                allowDrop: boolean;
                dropType: null;
            }>;
            el$: import("vue").Ref<import("element-plus/es/utils").Nullable<HTMLElement>>;
            dropIndicator$: import("vue").Ref<import("element-plus/es/utils").Nullable<HTMLElement>>;
            isEmpty: import("vue").ComputedRef<boolean>;
            filter: (value: any) => void;
            getNodeKey: (node: Node) => any;
            getNodePath: (data: TreeKey | import("element-plus").TreeNodeData) => import("element-plus").TreeNodeData[];
            getCheckedNodes: (leafOnly?: boolean, includeHalfChecked?: boolean) => import("element-plus").TreeNodeData[];
            getCheckedKeys: (leafOnly?: boolean) => TreeKey[];
            getCurrentNode: () => import("element-plus").TreeNodeData;
            getCurrentKey: () => any;
            setCheckedNodes: (nodes: Node[], leafOnly?: boolean) => void;
            setCheckedKeys: (keys: TreeKey[], leafOnly?: boolean) => void;
            setChecked: (data: TreeKey | import("element-plus").TreeNodeData, checked: boolean, deep: boolean) => void;
            getHalfCheckedNodes: () => import("element-plus").TreeNodeData[];
            getHalfCheckedKeys: () => TreeKey[];
            setCurrentNode: (node: Node, shouldAutoExpandParent?: boolean) => void;
            setCurrentKey: (key?: TreeKey, shouldAutoExpandParent?: boolean) => void;
            t: import("element-plus").Translator;
            getNode: (data: TreeKey | import("element-plus").TreeNodeData) => Node;
            remove: (data: import("element-plus").TreeNodeData | Node) => void;
            append: (data: import("element-plus").TreeNodeData, parentNode: import("element-plus").TreeNodeData | TreeKey | Node) => void;
            insertBefore: (data: import("element-plus").TreeNodeData, refNode: TreeKey | import("element-plus").TreeNodeData | Node) => void;
            insertAfter: (data: import("element-plus").TreeNodeData, refNode: TreeKey | import("element-plus").TreeNodeData | Node) => void;
            handleNodeExpand: (nodeData: import("element-plus").TreeNodeData, node: Node, instance: import("vue").ComponentInternalInstance) => void;
            updateKeyChildren: (key: TreeKey, data: import("element-plus").TreeData) => void;
        }, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, ("check" | "current-change" | "node-expand" | "check-change" | "node-click" | "node-contextmenu" | "node-collapse" | "node-drag-start" | "node-drag-end" | "node-drop" | "node-drag-leave" | "node-drag-enter" | "node-drag-over")[], string, {
            data: unknown[];
            props: import("element-plus").TreeOptionProps;
            checkStrictly: boolean;
            lazy: boolean;
            accordion: boolean;
            draggable: boolean;
            defaultExpandAll: boolean;
            indent: number;
            renderAfterExpand: boolean;
            showCheckbox: boolean;
            expandOnClickNode: boolean;
            checkOnClickNode: boolean;
            checkDescendants: boolean;
            autoExpandParent: boolean;
            highlightCurrent: boolean;
        }, {}, string, {}, import("vue").GlobalComponents, import("vue").GlobalDirectives, string, import("vue").ComponentProvideOptions> & {
            beforeCreate?: (() => void) | (() => void)[];
            created?: (() => void) | (() => void)[];
            beforeMount?: (() => void) | (() => void)[];
            mounted?: (() => void) | (() => void)[];
            beforeUpdate?: (() => void) | (() => void)[];
            updated?: (() => void) | (() => void)[];
            activated?: (() => void) | (() => void)[];
            deactivated?: (() => void) | (() => void)[];
            beforeDestroy?: (() => void) | (() => void)[];
            beforeUnmount?: (() => void) | (() => void)[];
            destroyed?: (() => void) | (() => void)[];
            unmounted?: (() => void) | (() => void)[];
            renderTracked?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            renderTriggered?: ((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[];
            errorCaptured?: ((err: unknown, instance: import("vue").ComponentPublicInstance | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance | null, info: string) => boolean | void)[];
        }) | undefined;
        $forceUpdate?: (() => void) | undefined;
        $nextTick?: typeof nextTick | undefined;
        $watch?: (<T_1 extends string | ((...args: any) => any)>(source: T_1, cb: T_1 extends (...args: any) => infer R ? (...args: [R, R, import("@vue/reactivity").OnCleanup]) => any : (...args: [any, any, import("@vue/reactivity").OnCleanup]) => any, options?: import("vue").WatchOptions) => import("vue").WatchStopHandle) | undefined;
        data?: unknown[] | undefined;
        props?: import("element-plus").TreeOptionProps | undefined;
        checkStrictly?: boolean | undefined;
        lazy?: boolean | undefined;
        accordion?: boolean | undefined;
        draggable?: boolean | undefined;
        defaultExpandAll?: boolean | undefined;
        indent?: number | undefined;
        renderAfterExpand?: boolean | undefined;
        showCheckbox?: boolean | undefined;
        expandOnClickNode?: boolean | undefined;
        checkOnClickNode?: boolean | undefined;
        checkDescendants?: boolean | undefined;
        autoExpandParent?: boolean | undefined;
        highlightCurrent?: boolean | undefined;
        icon?: string | import("vue").Component<any, any, any, import("vue").ComputedOptions, import("vue").MethodOptions, {}, any> | undefined;
        emptyText?: string | undefined;
        defaultCheckedKeys?: TreeKey[] | undefined;
        defaultExpandedKeys?: TreeKey[] | undefined;
        currentNodeKey?: string | number | undefined;
        load?: import("element-plus").LoadFunction | undefined;
        "onCurrent-change"?: ((...args: any[]) => any) | undefined;
        nodeKey?: string | undefined;
        renderContent?: Function | undefined;
        allowDrag?: Function | undefined;
        allowDrop?: Function | undefined;
        filterNodeMethod?: import("element-plus").FilterNodeMethodFunction | undefined;
        "onNode-expand"?: ((...args: any[]) => any) | undefined;
        onCheck?: ((...args: any[]) => any) | undefined;
        "onCheck-change"?: ((...args: any[]) => any) | undefined;
        "onNode-click"?: ((...args: any[]) => any) | undefined;
        "onNode-contextmenu"?: ((...args: any[]) => any) | undefined;
        "onNode-collapse"?: ((...args: any[]) => any) | undefined;
        "onNode-drag-start"?: ((...args: any[]) => any) | undefined;
        "onNode-drag-end"?: ((...args: any[]) => any) | undefined;
        "onNode-drop"?: ((...args: any[]) => any) | undefined;
        "onNode-drag-leave"?: ((...args: any[]) => any) | undefined;
        "onNode-drag-enter"?: ((...args: any[]) => any) | undefined;
        "onNode-drag-over"?: ((...args: any[]) => any) | undefined;
        ns?: {
            namespace: import("vue").ComputedRef<string>;
            b: (blockSuffix?: string) => string;
            e: (element?: string) => string;
            m: (modifier?: string) => string;
            be: (blockSuffix?: string, element?: string) => string;
            em: (element?: string, modifier?: string) => string;
            bm: (blockSuffix?: string, modifier?: string) => string;
            bem: (blockSuffix?: string, element?: string, modifier?: string) => string;
            is: {
                (name: string, state: boolean | undefined): string;
                (name: string): string;
            };
            cssVar: (object: Record<string, string>) => Record<string, string>;
            cssVarName: (name: string) => string;
            cssVarBlock: (object: Record<string, string>) => Record<string, string>;
            cssVarBlockName: (name: string) => string;
        } | undefined;
        store?: {
            currentNode: {
                id: number;
                text: string;
                checked: boolean;
                indeterminate: boolean;
                data: import("element-plus").TreeNodeData;
                expanded: boolean;
                parent: any;
                visible: boolean;
                isCurrent: boolean;
                store: any;
                isLeafByUser: boolean;
                isLeaf: boolean;
                canFocus: boolean;
                level: number;
                loaded: boolean;
                childNodes: any[];
                loading: boolean;
                initialize: () => void;
                setData: (data: import("element-plus").TreeNodeData) => void;
                readonly label: string;
                readonly key: TreeKey;
                readonly disabled: boolean;
                readonly nextSibling: any | null;
                readonly previousSibling: any | null;
                contains: (target: Node, deep?: boolean) => boolean;
                remove: () => void;
                insertChild: (child?: import("element-plus").FakeNode | Node, index?: number, batch?: boolean) => void;
                insertBefore: (child: import("element-plus").FakeNode | Node, ref: Node) => void;
                insertAfter: (child: import("element-plus").FakeNode | Node, ref: Node) => void;
                removeChild: (child: Node) => void;
                removeChildByData: (data: import("element-plus").TreeNodeData) => void;
                expand: (callback?: () => void, expandParent?: boolean) => void;
                doCreateChildren: (array: import("element-plus").TreeNodeData[], defaultProps?: import("element-plus").TreeNodeLoadedDefaultProps) => void;
                collapse: () => void;
                shouldLoadData: () => boolean;
                updateLeafState: () => void;
                setChecked: (value?: boolean | string, deep?: boolean, recursion?: boolean, passValue?: boolean) => void;
                getChildren: (forceInit?: boolean) => import("element-plus").TreeNodeData | import("element-plus").TreeNodeData[];
                updateChildren: () => void;
                loadData: (callback: (node: Node) => void, defaultProps?: import("element-plus").TreeNodeLoadedDefaultProps) => void;
                eachNode: (callback: (node: Node) => void) => void;
                reInitChecked: () => void;
            };
            currentNodeKey: TreeKey;
            nodesMap: import("element-plus").TreeStoreNodesMap;
            root: {
                id: number;
                text: string;
                checked: boolean;
                indeterminate: boolean;
                data: import("element-plus").TreeNodeData;
                expanded: boolean;
                parent: any;
                visible: boolean;
                isCurrent: boolean;
                store: any;
                isLeafByUser: boolean;
                isLeaf: boolean;
                canFocus: boolean;
                level: number;
                loaded: boolean;
                childNodes: any[];
                loading: boolean;
                initialize: () => void;
                setData: (data: import("element-plus").TreeNodeData) => void;
                readonly label: string;
                readonly key: TreeKey;
                readonly disabled: boolean;
                readonly nextSibling: any | null;
                readonly previousSibling: any | null;
                contains: (target: Node, deep?: boolean) => boolean;
                remove: () => void;
                insertChild: (child?: import("element-plus").FakeNode | Node, index?: number, batch?: boolean) => void;
                insertBefore: (child: import("element-plus").FakeNode | Node, ref: Node) => void;
                insertAfter: (child: import("element-plus").FakeNode | Node, ref: Node) => void;
                removeChild: (child: Node) => void;
                removeChildByData: (data: import("element-plus").TreeNodeData) => void;
                expand: (callback?: () => void, expandParent?: boolean) => void;
                doCreateChildren: (array: import("element-plus").TreeNodeData[], defaultProps?: import("element-plus").TreeNodeLoadedDefaultProps) => void;
                collapse: () => void;
                shouldLoadData: () => boolean;
                updateLeafState: () => void;
                setChecked: (value?: boolean | string, deep?: boolean, recursion?: boolean, passValue?: boolean) => void;
                getChildren: (forceInit?: boolean) => import("element-plus").TreeNodeData | import("element-plus").TreeNodeData[];
                updateChildren: () => void;
                loadData: (callback: (node: Node) => void, defaultProps?: import("element-plus").TreeNodeLoadedDefaultProps) => void;
                eachNode: (callback: (node: Node) => void) => void;
                reInitChecked: () => void;
            };
            data: import("element-plus").TreeNodeData[];
            lazy: boolean;
            load: import("element-plus").LoadFunction;
            filterNodeMethod: import("element-plus").FilterNodeMethodFunction;
            key: TreeKey;
            defaultCheckedKeys: TreeKey[];
            checkStrictly: boolean;
            defaultExpandedKeys: TreeKey[];
            autoExpandParent: boolean;
            defaultExpandAll: boolean;
            checkDescendants: boolean;
            props: {
                children?: string | undefined;
                label?: (string | ((data: import("element-plus").TreeNodeData, node: Node) => string)) | undefined;
                disabled?: (string | ((data: import("element-plus").TreeNodeData, node: Node) => boolean)) | undefined;
                isLeaf?: (string | ((data: import("element-plus").TreeNodeData, node: Node) => boolean)) | undefined;
                class?: ((data: import("element-plus").TreeNodeData, node: Node) => string | {
                    [key: string]: boolean;
                }) | undefined;
            };
            initialize: () => void;
            filter: (value: import("element-plus").FilterValue) => void;
            setData: (newVal: import("element-plus").TreeData) => void;
            getNode: (data: TreeKey | import("element-plus").TreeNodeData | Node) => Node;
            insertBefore: (data: import("element-plus").TreeNodeData, refData: TreeKey | import("element-plus").TreeNodeData | Node) => void;
            insertAfter: (data: import("element-plus").TreeNodeData, refData: TreeKey | import("element-plus").TreeNodeData | Node) => void;
            remove: (data: import("element-plus").TreeNodeData | Node) => void;
            append: (data: import("element-plus").TreeNodeData, parentData: import("element-plus").TreeNodeData | TreeKey | Node) => void;
            _initDefaultCheckedNodes: () => void;
            _initDefaultCheckedNode: (node: Node) => void;
            setDefaultCheckedKey: (newVal: TreeKey[]) => void;
            registerNode: (node: Node) => void;
            deregisterNode: (node: Node) => void;
            getCheckedNodes: (leafOnly?: boolean, includeHalfChecked?: boolean) => import("element-plus").TreeNodeData[];
            getCheckedKeys: (leafOnly?: boolean) => TreeKey[];
            getHalfCheckedNodes: () => import("element-plus").TreeNodeData[];
            getHalfCheckedKeys: () => TreeKey[];
            _getAllNodes: () => Node[];
            updateChildren: (key: TreeKey, data: import("element-plus").TreeData) => void;
            _setCheckedKeys: (key: TreeKey, leafOnly: boolean | undefined, checkedKeys: {
                [key: string]: boolean;
            }) => void;
            setCheckedNodes: (array: Node[], leafOnly?: boolean) => void;
            setCheckedKeys: (keys: TreeKey[], leafOnly?: boolean) => void;
            setDefaultExpandedKeys: (keys: TreeKey[]) => void;
            setChecked: (data: TreeKey | import("element-plus").TreeNodeData, checked: boolean, deep: boolean) => void;
            getCurrentNode: () => Node;
            setCurrentNode: (currentNode: Node) => void;
            setUserCurrentNode: (node: Node, shouldAutoExpandParent?: boolean) => void;
            setCurrentNodeKey: (key?: TreeKey, shouldAutoExpandParent?: boolean) => void;
        } | undefined;
        root?: {
            id: number;
            text: string;
            checked: boolean;
            indeterminate: boolean;
            data: import("element-plus").TreeNodeData;
            expanded: boolean;
            parent: any;
            visible: boolean;
            isCurrent: boolean;
            store: any;
            isLeafByUser: boolean;
            isLeaf: boolean;
            canFocus: boolean;
            level: number;
            loaded: boolean;
            childNodes: any[];
            loading: boolean;
            initialize: () => void;
            setData: (data: import("element-plus").TreeNodeData) => void;
            readonly label: string;
            readonly key: TreeKey;
            readonly disabled: boolean;
            readonly nextSibling: any | null;
            readonly previousSibling: any | null;
            contains: (target: Node, deep?: boolean) => boolean;
            remove: () => void;
            insertChild: (child?: import("element-plus").FakeNode | Node, index
            /**
             * 对外暴露的属性及方法
             */
            ? /**
             * 对外暴露的属性及方法
             */: number, batch?: boolean) => void;
            insertBefore: (child: import("element-plus").FakeNode | Node, ref: Node) => void;
            insertAfter: (child: import("element-plus").FakeNode | Node, ref: Node) => void;
            removeChild: (child: Node) => void;
            removeChildByData: (data: import("element-plus").TreeNodeData) => void;
            expand: (callback?: () => void, expandParent?: boolean) => void;
            doCreateChildren: (array: import("element-plus").TreeNodeData[], defaultProps?: import("element-plus").TreeNodeLoadedDefaultProps) => void;
            collapse: () => void;
            shouldLoadData: () => boolean;
            updateLeafState: () => void;
            setChecked: (value?: boolean | string, deep?: boolean, recursion?: boolean, passValue?: boolean) => void;
            getChildren: (forceInit?: boolean) => import("element-plus").TreeNodeData | import("element-plus").TreeNodeData[];
            updateChildren: () => void;
            loadData: (callback: (node: Node) => void, defaultProps?: import("element-plus").TreeNodeLoadedDefaultProps) => void;
            eachNode: (callback: (node: Node) => void) => void;
            reInitChecked: () => void;
        } | undefined;
        currentNode?: {
            id: number;
            text: string;
            checked: boolean;
            indeterminate: boolean;
            data: import("element-plus").TreeNodeData;
            expanded: boolean;
            parent: any;
            visible: boolean;
            isCurrent: boolean;
            store: any;
            isLeafByUser: boolean;
            isLeaf: boolean;
            canFocus: boolean;
            level: number;
            loaded: boolean;
            childNodes: any[];
            loading: boolean;
            initialize: () => void;
            setData: (data: import("element-plus").TreeNodeData) => void;
            readonly label: string;
            readonly key: TreeKey;
            readonly disabled: boolean;
            readonly nextSibling: any | null;
            readonly previousSibling: any | null;
            contains: (target: Node, deep?: boolean) => boolean;
            remove: () => void;
            insertChild: (child?: import("element-plus").FakeNode | Node, index?: number, batch?: boolean) => void;
            insertBefore: (child: import("element-plus").FakeNode | Node, ref: Node) => void;
            insertAfter: (child: import("element-plus").FakeNode | Node, ref: Node) => void;
            removeChild: (child: Node) => void;
            removeChildByData: (data: import("element-plus").TreeNodeData) => void;
            expand: (callback?: () => void, expandParent?: boolean) => void;
            doCreateChildren: (array: import("element-plus").TreeNodeData[], defaultProps?: import("element-plus").TreeNodeLoadedDefaultProps) => void;
            collapse: () => void;
            shouldLoadData: () => boolean;
            updateLeafState: () => void;
            setChecked: (value?: boolean | string, deep?: boolean, recursion?: boolean, passValue?: boolean) => void;
            getChildren: (forceInit?: boolean) => import("element-plus").TreeNodeData | import("element-plus").TreeNodeData[];
            updateChildren: () => void;
            loadData: (callback: (node: Node) => void, defaultProps?: import("element-plus").TreeNodeLoadedDefaultProps) => void;
            eachNode: (callback: (node: Node) => void) => void;
            reInitChecked: () => void;
        } | undefined;
        dragState?: {
            showDropIndicator: boolean;
            draggingNode: null;
            dropNode: null;
            allowDrop: boolean;
            dropType: null;
        } | undefined;
        el$?: import("element-plus/es/utils").Nullable<HTMLElement> | undefined;
        dropIndicator$?: import("element-plus/es/utils").Nullable<HTMLElement> | undefined;
        isEmpty?: boolean | undefined;
        filter?: ((value: any) => void) | undefined;
        getNodeKey?: ((node: Node) => any) | undefined;
        getNodePath?: ((data: TreeKey | import("element-plus").TreeNodeData) => import("element-plus").TreeNodeData[]) | undefined;
        getCheckedNodes?: ((leafOnly?: boolean, includeHalfChecked?: boolean) => import("element-plus").TreeNodeData[]) | undefined;
        getCheckedKeys?: ((leafOnly?: boolean) => TreeKey[]) | undefined;
        getCurrentNode?: (() => import("element-plus").TreeNodeData) | undefined;
        getCurrentKey?: (() => any) | undefined;
        setCheckedNodes?: ((nodes: Node[], leafOnly?: boolean) => void) | undefined;
        setCheckedKeys?: ((keys: TreeKey[], leafOnly?: boolean) => void) | undefined;
        setChecked?: ((data: TreeKey | import("element-plus").TreeNodeData, checked: boolean, deep: boolean) => void) | undefined;
        getHalfCheckedNodes?: (() => import("element-plus").TreeNodeData[]) | undefined;
        getHalfCheckedKeys?: (() => TreeKey[]) | undefined;
        setCurrentNode?: ((node: Node, shouldAutoExpandParent?: boolean) => void) | undefined;
        setCurrentKey?: ((key?: TreeKey, shouldAutoExpandParent?: boolean) => void) | undefined;
        t?: import("element-plus").Translator | undefined;
        getNode?: ((data: TreeKey | import("element-plus").TreeNodeData) => Node) | undefined;
        remove?: ((data: import("element-plus").TreeNodeData | Node) => void) | undefined;
        append?: ((data: import("element-plus").TreeNodeData, parentNode: import("element-plus").TreeNodeData | TreeKey | Node) => void) | undefined;
        insertBefore?: ((data: import("element-plus").TreeNodeData, refNode: TreeKey | import("element-plus").TreeNodeData | Node) => void) | undefined;
        insertAfter?: ((data: import("element-plus").TreeNodeData, refNode: TreeKey | import("element-plus").TreeNodeData | Node) => void) | undefined;
        handleNodeExpand?: ((nodeData: import("element-plus").TreeNodeData, node: Node, instance: import("vue").ComponentInternalInstance) => void) | undefined;
        updateKeyChildren?: ((key: TreeKey, data: import("element-plus").TreeData) => void) | undefined;
    }>): void;
    attrs: any;
    slots: Partial<Record<NonNullable<string | number>, (_: any) => any>>;
    emit: {
        'update:modelValue': [modelValue: string | number];
        'update:gridId': [gridId: string | number];
        'update:gridName': [gridName: string];
        'update:grid': [grid: T];
    };
}>) => import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}> & {
    __ctx?: Awaited<typeof __VLS_setup>;
};
export default _default;
type __VLS_PrettifyLocal<T> = {
    [K in keyof T]: T[K];
} & {};
